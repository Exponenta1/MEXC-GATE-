#!/usr/bin/env python3
"""
MEXC vs Gate.io –ú–æ–Ω–∏—Ç–æ—Ä —Å–ø—Ä–µ–¥–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ v3.2
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–ø—Ä–µ–¥—ã –º–µ–∂–¥—É –¥–≤—É–º—è –±–∏—Ä–∂–∞–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
–î–æ–±–∞–≤–ª–µ–Ω—ã: –æ–±—ä—ë–º—ã –±–∏–¥–æ–≤ MEXC, –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å—Ç—Ä–æ–≥–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ priceScale
"""

import time
import json
import hmac
import hashlib
import requests
import requests.exceptions
import threading
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional, Tuple, Set
import urllib3
from concurrent.futures import ThreadPoolExecutor, as_completed
import logging
import sys

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è telegram
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.WARNING
)
logging.getLogger('httpx').setLevel(logging.WARNING)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Telegram Bot —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
try:
    from telegram import Bot
    from telegram.error import TelegramError
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False
    print("‚ö†Ô∏è python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Telegram —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    print("   –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: pip install python-telegram-bot")

class DailySpreadTracker:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–Ω–µ–≤–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤ –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""       
    def __init__(self):
        self.daily_spreads = []
        self.pinned_message_id = None
        self.last_pin_update = 0
        self.last_reset_date = self.get_current_moscow_date()
        self.spread_counter = 0
        self.pin_initialized = False
        self.current_date_for_pin = self.get_current_moscow_date()
        self.pin_created_today = False
        
    def can_create_pin_today(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫—Ä–µ–ø —Å–µ–≥–æ–¥–Ω—è (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å)"""
        current_date = self.get_current_moscow_date()
        
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        if current_date != self.current_date_for_pin:
            self.pin_created_today = False
            self.current_date_for_pin = current_date
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        return not self.pin_created_today
        
    def find_existing_daily_message(self, telegram_notifier) -> Optional[int]:
        """–ò—â–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '–°–ø—Ä–µ–¥—ã –∑–∞ –¥–µ–Ω—å' –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            if not telegram_notifier:
                return None
                
            from telegram.error import TelegramError
            
            current_date = self.get_current_moscow_date()
            date_formatted = datetime.strptime(current_date, '%Y-%m-%d').strftime('%d.%m.%Y')
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                chat = telegram_notifier.bot.get_chat(telegram_notifier.chat_id)
                
                if hasattr(chat, 'pinned_message') and chat.pinned_message:
                    pinned_msg = chat.pinned_message
                    if pinned_msg.text and "–°–ü–†–ï–î–´ –ó–ê –î–ï–ù–¨" in pinned_msg.text and date_formatted in pinned_msg.text:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–∫—Ä–µ–ø –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã {date_formatted}")
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø—Ä–µ–¥—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                        self.load_spreads_from_message(pinned_msg.text)
                        return pinned_msg.message_id
                
                # –ò—â–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                updates = telegram_notifier.bot.get_updates(limit=100)
                
                for update in reversed(updates):
                    if (update.message and 
                        update.message.chat.id == int(telegram_notifier.chat_id) and
                        update.message.text and 
                        "–°–ü–†–ï–î–´ –ó–ê –î–ï–ù–¨" in update.message.text and
                        date_formatted in update.message.text):
                        
                        message_id = update.message.message_id
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø—Ä–µ–¥—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                        self.load_spreads_from_message(update.message.text)
                        
                        try:
                            telegram_notifier.bot.pin_chat_message(
                                chat_id=telegram_notifier.chat_id,
                                message_id=message_id,
                                disable_notification=True
                            )
                            print(f"üìå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –¥–ª—è –¥–∞—Ç—ã {date_formatted}")
                        except Exception as pin_error:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å {message_id}: {pin_error}")
                        
                        return message_id
                        
            except TelegramError as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫—Ä–µ–ø–∞: {e}")
            return None
        
    def load_spreads_from_message(self, message_text: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø—Ä–µ–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            lines = message_text.split('\n')
            loaded_count = 0
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            for line in lines[2:]:  # –ü–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                line = line.strip()
                if not line:
                    continue
                
                # –§–æ—Ä–º–∞—Ç: PAIR SPREAD% DURATION–º START_TIME - END_TIME
                # –ü—Ä–∏–º–µ—Ä: BTC 3.50% 15–º 30—Å 10:25:30 - 10:41:00
                parts = line.split()
                if len(parts) >= 5:
                    try:
                        pair = parts[0]
                        spread_str = parts[1].replace('%', '')
                        max_spread = float(spread_str)
                        
                        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
                        end_time = parts[-1]
                        
                        # –ü–∞—Ä—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –∏—â–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å –º, —Å, —á
                        duration_seconds = 0
                        for part in parts[2:-2]:  # –í—Å—ë –º–µ–∂–¥—É —Å–ø—Ä–µ–¥–æ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º
                            if '—á' in part:
                                duration_seconds += int(part.replace('—á', '')) * 3600
                            elif '–º' in part:
                                duration_seconds += int(part.replace('–º', '')) * 60
                            elif '—Å' in part:
                                duration_seconds += int(part.replace('—Å', ''))
                        
                        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ —Å–ø—Ä–µ–¥–µ
                        moscow_tz = timezone(timedelta(hours=3))
                        current_date_str = self.get_current_moscow_date()
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ timestamp
                        end_datetime_str = f"{current_date_str} {end_time}"
                        end_datetime = datetime.strptime(end_datetime_str, '%Y-%m-%d %H:%M:%S')
                        end_datetime = end_datetime.replace(tzinfo=moscow_tz)
                        
                        start_datetime = end_datetime - timedelta(seconds=duration_seconds)
                        
                        self.spread_counter += 1
                        
                        spread_data = {
                            'id': self.spread_counter,
                            'pair': pair,
                            'max_spread': max_spread,
                            'duration_seconds': duration_seconds,
                            'end_time': end_time,
                            'start_time': start_datetime.strftime('%H:%M:%S'),
                            'timestamp': end_datetime.timestamp()
                        }
                        
                        self.daily_spreads.append(spread_data)
                        loaded_count += 1
                        
                    except (ValueError, IndexError) as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É: {line} ({e})")
                        continue
            
            if loaded_count > 0:
                print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ø—Ä–µ–¥–æ–≤ –∏–∑ –∑–∞–∫—Ä–µ–ø–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–µ–¥–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")    
        
    def start_tracking_spread(self, pair: str, message_id: int, initial_spread: float, is_new_ticker: bool = False):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–ø—Ä–µ–¥–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Å—Ç–∞—Ä—Ç–∞ –∏ –Ω–∞—á–∞–ª—å–Ω—ã–º —Å–ø—Ä–µ–¥–æ–º"""
        current_time = time.time()
        self.active_spreads[pair] = {
            'start_time': current_time,
            'message_id': message_id,
            'last_update': current_time,
            'last_message_update': current_time,
            'max_spread': initial_spread,
            'is_new_ticker': is_new_ticker,
            'new_ticker_post_time': current_time if is_new_ticker else 0
        }
        
        if is_new_ticker:
            print(f"üÜï –ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ù–û–í–û–ì–û —Ç–∏–∫–µ—Ä–∞ {pair} (24-—á–∞—Å–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥)")
    
    def is_new_ticker_expired(self, pair: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç—ë–∫ –ª–∏ 24-—á–∞—Å–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
        if pair not in self.active_spreads or not self.active_spreads[pair].get('is_new_ticker'):
            return False
        
        current_time = time.time()
        post_time = self.active_spreads[pair]['new_ticker_post_time']
        hours_passed = (current_time - post_time) / 3600
        
        return hours_passed >= 24.0
    
    def get_current_moscow_date(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"""
        moscow_tz = timezone(timedelta(hours=3))
        current_time = datetime.now(moscow_tz)
        return current_time.strftime('%Y-%m-%d')
    
    def should_reset_daily_spreads(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω—ã–µ —Å–ø—Ä–µ–¥—ã (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 –ú–°–ö)"""
        current_date = self.get_current_moscow_date()
        return current_date != self.last_reset_date
    
    def reset_daily_spreads(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ —Å–ø—Ä–µ–¥—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—É"""
        self.daily_spreads = []
        self.spread_counter = 0
        self.last_reset_date = self.get_current_moscow_date()
        self.current_date_for_pin = self.last_reset_date
        self.pinned_message_id = None
        self.pin_created_today = False
        print(f"üîÑ –î–Ω–µ–≤–Ω—ã–µ —Å–ø—Ä–µ–¥—ã —Å–±—Ä–æ—à–µ–Ω—ã (–Ω–æ–≤—ã–π –¥–µ–Ω—å: {self.last_reset_date})")
        
    def try_find_existing_pin(self, telegram_notifier, max_attempts: int = 5) -> Optional[int]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫—Ä–µ–ø –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        print(f"üîç –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫—Ä–µ–ø–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã (–¥–æ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫)...")
        
        for attempt in range(1, max_attempts + 1):
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}...")
            
            message_id = self.find_existing_daily_message(telegram_notifier)
            if message_id:
                print(f"‚úÖ –ó–∞–∫—Ä–µ–ø –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {message_id}")
                self.pinned_message_id = message_id
                return message_id
            
            if attempt < max_attempts:
                print(f"   –ñ–¥—ë–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(3)
        
        print(f"‚ùå –ó–∞–∫—Ä–µ–ø –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return None
    
    def remove_pair_from_daily(self, pair: str):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –∏–∑ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        initial_count = len(self.daily_spreads)
        self.daily_spreads = [s for s in self.daily_spreads if s['pair'] != pair]
        removed_count = initial_count - len(self.daily_spreads)
        
        if removed_count > 0:
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {removed_count} –∑–∞–ø–∏—Å–µ–π {pair} –∏–∑ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    def add_completed_spread(self, pair: str, max_spread: float, duration_seconds: int, position_limit: int = 0):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Å–ø—Ä–µ–¥ –≤ –¥–Ω–µ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ —Å –ª–∏–º–∏—Ç–æ–º –ø–æ–∑–∏—Ü–∏–∏
        –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä–∞–∑—Ä—ã–≤–æ–º ‚â§ 3 –º–∏–Ω—É—Ç—ã"""
        if duration_seconds < 60:
            print(f"‚è±Ô∏è –°–ø—Ä–µ–¥ {pair} –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration_seconds}—Å < 1 –º–∏–Ω—É—Ç—ã")
            return
            
        moscow_tz = timezone(timedelta(hours=3))
        current_time = datetime.now(moscow_tz)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø—Ä–µ–¥–∞
        start_time = current_time - timedelta(seconds=duration_seconds)
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥ —Å —Ç–∞–∫–∏–º –∂–µ —Ç–∏–∫–µ—Ä–æ–º
        similar_spread_index = None
        for i, spread in enumerate(self.daily_spreads):
            if spread['pair'] == pair:
                similar_spread_index = i
                
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ—Ö–æ–∂–∏–π —Å–ø—Ä–µ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä—ã–≤
        if similar_spread_index is not None:
            last_spread = self.daily_spreads[similar_spread_index]
            last_end_time_str = f"{self.current_date_for_pin} {last_spread['end_time']}"
            last_end_time = datetime.strptime(last_end_time_str, '%Y-%m-%d %H:%M:%S')
            last_end_time = last_end_time.replace(tzinfo=moscow_tz)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä—ã–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö
            time_gap = (start_time - last_end_time).total_seconds() / 60.0
            
            # –ï—Å–ª–∏ —Ä–∞–∑—Ä—ã–≤ ‚â§ 3 –º–∏–Ω—É—Ç—ã, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø—Ä–µ–¥—ã
            if time_gap <= 3.0:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø—Ä–µ–¥–∞
                last_spread['end_time'] = current_time.strftime('%H:%M:%S')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞—Ä–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å + —Ä–∞–∑—Ä—ã–≤ + –Ω–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
                old_duration = last_spread['duration_seconds']
                gap_duration = int(time_gap * 60)
                new_total_duration = old_duration + gap_duration + duration_seconds
                last_spread['duration_seconds'] = new_total_duration
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ (–±–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–∏–π)
                last_spread['max_spread'] = max(last_spread['max_spread'], max_spread)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
                last_spread['timestamp'] = current_time.timestamp()
                
                print(f"üîÑ –°–ø—Ä–µ–¥ {pair} –æ–±—ä–µ–¥–∏–Ω–µ–Ω —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º: –æ–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {self.format_duration(new_total_duration)}")
                return
        
        # –ï—Å–ª–∏ –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ø—Ä–µ–¥
        self.spread_counter += 1
        
        spread_data = {
            'id': self.spread_counter,
            'pair': pair,
            'max_spread': max_spread,
            'duration_seconds': duration_seconds,
            'end_time': current_time.strftime('%H:%M:%S'),
            'start_time': start_time.strftime('%H:%M:%S'),
            'timestamp': current_time.timestamp(),
            'position_limit': position_limit
        }
        
        # –î–û–ë–ê–í–õ–Ø–ï–ú –°–ü–†–ï–î –í –°–ü–ò–°–û–ö
        self.daily_spreads.append(spread_data)
        print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω —Å–ø—Ä–µ–¥ {pair} ({max_spread:.2f}%, {self.format_duration(duration_seconds)}) –≤ –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    def format_daily_spreads_message(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–Ω–µ–≤–Ω—ã–º–∏ —Å–ø—Ä–µ–¥–∞–º–∏, –≤–∫–ª—é—á–∞—è –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏"""
        date_str = datetime.strptime(self.current_date_for_pin, '%Y-%m-%d').strftime('%d.%m.%Y')
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∂–∏—Ä–Ω–∞—è
        message = f"<b>–°–ü–†–ï–î–´ –ó–ê –î–ï–ù–¨ {date_str}</b>\n\n"
        
        if not self.daily_spreads:
            return message
        
        sorted_spreads = sorted(self.daily_spreads, key=lambda x: x['timestamp'])
        
        for spread in sorted_spreads:
            duration_formatted = self.format_duration(spread['duration_seconds'])
            time_interval = f"{spread['start_time']} - {spread['end_time']}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            limit_info = ""
            if 'position_limit' in spread and spread['position_limit'] > 0:
                limit_info = f" [{spread['position_limit']:,} USDT]".replace(',', ' ')
            
            message += f"{spread['pair']} {spread['max_spread']:.2f}%{limit_info} {duration_formatted} {time_interval}\n"
        
        return message
    
    def format_duration(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{seconds}—Å"
        elif seconds < 3600:
            minutes = seconds // 60
            remaining_seconds = seconds % 60
            return f"{minutes}–º {remaining_seconds}—Å"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            remaining_seconds = seconds % 60
            return f"{hours}—á {minutes}–º {remaining_seconds}—Å"
    

class SpreadTracker:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–ø—Ä–µ–¥–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        self.active_spreads = {}
        self.pending_spreads = {}  # –ù–æ–≤–æ–µ: —Ö—Ä–∞–Ω–∏—Ç —Å–ø—Ä–µ–¥—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.banned_tickers = set()
        self.banned_file = "banned_tickers.txt"
        self.price_failure_count = {}
        self.new_tickers_today = []
        self.max_new_tickers_per_day = 3
        self.load_banned_tickers()
        
    def add_pending_spread(self, pair: str, initial_spread: float, is_new_ticker: bool = False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø—Ä–µ–¥ –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (5 —Å–µ–∫—É–Ω–¥)"""
        current_time = time.time()
        self.pending_spreads[pair] = {
            'start_time': current_time,
            'initial_spread': initial_spread,
            'is_new_ticker': is_new_ticker
        }
        print(f"‚è≥ –°–ø—Ä–µ–¥ {pair} ({initial_spread:.2f}%) –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (5 —Å–µ–∫—É–Ω–¥)")
        
    def check_pending_spreads(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∂–∏–¥–∞—é—â–∏–µ —Å–ø—Ä–µ–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ, —á—Ç–æ –ø—Ä–æ—à–ª–∏ 5 —Å–µ–∫—É–Ω–¥"""
        current_time = time.time()
        confirmed_spreads = []
        
        for pair in list(self.pending_spreads.keys()):
            pending_info = self.pending_spreads[pair]
            time_elapsed = current_time - pending_info['start_time']
            
            if time_elapsed >= 5.0:
                confirmed_spreads.append({
                    'pair': pair,
                    'initial_spread': pending_info['initial_spread'],
                    'is_new_ticker': pending_info['is_new_ticker']
                })
                del self.pending_spreads[pair]
                print(f"‚úÖ –°–ø—Ä–µ–¥ {pair} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø–æ—Å–ª–µ 5 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
        
        return confirmed_spreads
    
    def remove_pending_spread(self, pair: str):
        """–£–¥–∞–ª—è–µ—Ç —Å–ø—Ä–µ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö (–µ—Å–ª–∏ –æ–Ω –ø—Ä–æ–ø–∞–ª)"""
        if pair in self.pending_spreads:
            del self.pending_spreads[pair]
            print(f"üóëÔ∏è –°–ø—Ä–µ–¥ {pair} —É–¥–∞–ª—ë–Ω –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è (–ø—Ä–æ–ø–∞–ª –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)")    
        
    def increment_price_failure(self, pair: str):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–∏–π —Ü–µ–Ω—ã"""
        self.price_failure_count[pair] = self.price_failure_count.get(pair, 0) + 1
        print(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {pair}: {self.price_failure_count[pair]}/3")
        
        # –ï—Å–ª–∏ 3 –Ω–µ—É–¥–∞—á–∏ –ø–æ–¥—Ä—è–¥ - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ä
        if self.price_failure_count[pair] >= 3:
            print(f"üÜï –¢–∏–∫–µ—Ä {pair} –¥–æ—Å—Ç–∏–≥ 3 –Ω–µ—É–¥–∞—á, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∑–∞ 24 —á–∞—Å–∞
            if self.can_add_new_ticker():
                print(f"‚úÖ –¢–∏–∫–µ—Ä {pair} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–æ–≤—ã–π (–ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω)")
                # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–¥–µ—Å—å - —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã
                return True
            else:
                print(f"üö´ –¢–∏–∫–µ—Ä {pair} –ù–ï –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–æ–≤—ã–π (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {self.max_new_tickers_per_day}/–¥–µ–Ω—å)")
                self.price_failure_count[pair] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å
                return False
        return False
    
    def can_add_new_ticker(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ä (–ª–∏–º–∏—Ç 3 –∑–∞ 24 —á–∞—Å–∞)"""
        current_time = time.time()
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        self.new_tickers_today = [
            (pair, timestamp) for pair, timestamp in self.new_tickers_today
            if current_time - timestamp < 24 * 3600
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        return len(self.new_tickers_today) < self.max_new_tickers_per_day
    
    def add_new_ticker_record(self, pair: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ä–µ"""
        current_time = time.time()
        self.new_tickers_today.append((pair, current_time))
        print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ä {pair} ({len(self.new_tickers_today)}/{self.max_new_tickers_per_day})")    
        
    def update_spread_time(self, pair: str, current_spread: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ—á–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–ø—Ä–µ–¥–∞"""
        if pair in self.active_spreads:
            current_time = time.time()
            start_time = self.active_spreads[pair]['start_time']
            seconds_from_start = int(current_time - start_time)
            
            self.active_spreads[pair]['last_update'] = current_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
            if current_spread > self.active_spreads[pair]['max_spread']:
                self.active_spreads[pair]['max_spread'] = current_spread
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
            history = self.active_spreads[pair]['spread_history']
            if not history or seconds_from_start - history[-1][0] >= 30:
                history.append((seconds_from_start, current_spread))
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 60 —Ç–æ—á–µ–∫ (30 –º–∏–Ω—É—Ç)
                if len(history) > 60:
                    history.pop(0)                  
            
    def reset_price_failure(self, pair: str):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–∏–π —Ü–µ–Ω—ã –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏"""
        if pair in self.price_failure_count:
            del self.price_failure_count[pair]    
        
    def load_banned_tickers(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            import os
            if os.path.exists(self.banned_file):
                with open(self.banned_file, 'r', encoding='utf-8') as f:
                    self.banned_tickers = set(line.strip() for line in f if line.strip())
                print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {len(self.banned_tickers)} —Ç–∏–∫–µ—Ä–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
    
    def save_banned_tickers(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.banned_file, 'w', encoding='utf-8') as f:
                for ticker in sorted(self.banned_tickers):
                    f.write(f"{ticker}\n")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
    
    def add_banned_ticker(self, ticker: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∏–∫–µ—Ä –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        self.banned_tickers.add(ticker)
        self.save_banned_tickers()
        print(f"üö´ –¢–∏–∫–µ—Ä {ticker} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
    
    def remove_banned_ticker(self, ticker: str):
        """–£–¥–∞–ª—è–µ—Ç —Ç–∏–∫–µ—Ä –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        if ticker in self.banned_tickers:
            self.banned_tickers.remove(ticker)
            self.save_banned_tickers()
            print(f"‚úÖ –¢–∏–∫–µ—Ä {ticker} —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
            return True
        return False
    
    def is_ticker_banned(self, ticker: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ —Ç–∏–∫–µ—Ä"""
        return ticker in self.banned_tickers
    
    def format_duration(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{seconds}—Å"
        elif seconds < 3600:  # –º–µ–Ω—å—à–µ —á–∞—Å–∞
            minutes = seconds // 60
            remaining_seconds = seconds % 60
            return f"{minutes}–º {remaining_seconds}—Å"
        else:  # —á–∞—Å –∏ –±–æ–ª—å—à–µ
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            remaining_seconds = seconds % 60
            return f"{hours}—á {minutes}–º {remaining_seconds}—Å"
    
    def start_tracking_spread(self, pair: str, message_id: int, initial_spread: float, is_new_ticker: bool = False):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–ø—Ä–µ–¥–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
        current_time = time.time()
        self.active_spreads[pair] = {
            'start_time': current_time,
            'message_id': message_id,
            'last_update': current_time,
            'last_message_update': current_time,
            'max_spread': initial_spread,
            'is_new_ticker': is_new_ticker,
            'new_ticker_post_time': current_time if is_new_ticker else 0,
            'spread_history': [(0, initial_spread)]  # –ù–û–í–û–ï: –∏—Å—Ç–æ—Ä–∏—è (—Å–µ–∫—É–Ω–¥—ã_–æ—Ç_—Å—Ç–∞—Ä—Ç–∞, —Å–ø—Ä–µ–¥)
        }
        
        if is_new_ticker:
            self.add_new_ticker_record(pair)
            print(f"üÜï –ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ù–û–í–û–ì–û —Ç–∏–∫–µ—Ä–∞ {pair} (24-—á–∞—Å–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥)")
        
    def should_update_message(self, pair: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã)"""
        if pair not in self.active_spreads:
            return False
        
        current_time = time.time()
        last_message_update = self.active_spreads[pair]['last_message_update']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        if current_time - last_message_update >= 3:
            self.active_spreads[pair]['last_message_update'] = current_time
            return True
        return False

    def get_spread_duration(self, pair: str) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–ø—Ä–µ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –æ—Ç –º–æ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–∞"""
        if pair in self.active_spreads:
            current_time = time.time()
            start_time = self.active_spreads[pair]['start_time']
            return int(current_time - start_time)
        return 0    
    
    def get_max_spread(self, pair: str) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –ø–∞—Ä—ã"""
        if pair in self.active_spreads:
            return self.active_spreads[pair]['max_spread']
        return 0.0
    
    def should_ban_ticker(self, pair: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–±–∞–Ω–∏—Ç—å —Ç–∏–∫–µ—Ä (–±–æ–ª–µ–µ 4 —á–∞—Å–æ–≤)"""
        duration = self.get_spread_duration(pair)
        return duration > 4 * 3600  # 4 —á–∞—Å–∞
    
    def stop_tracking_spread(self, pair: str, reason: str = 'unknown') -> Optional[Dict]:
        """–ü—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–ø—Ä–µ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø—Ä–µ–¥–µ"""
        if pair in self.active_spreads:
            spread_info = self.active_spreads[pair].copy()
            spread_info['reason'] = reason
            spread_info['duration'] = self.get_spread_duration(pair)
            del self.active_spreads[pair]
            return spread_info
        return None
    
    def get_active_spreads(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø—Ä–µ–¥—ã"""
        return self.active_spreads.copy()

class TelegramNotifier:
    
    def __init__(self, bot_token: str, chat_id: str):
        if not TELEGRAM_AVAILABLE:
            raise ImportError("python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.bot = Bot(token=bot_token)
        self.last_message_time = 0
        self.message_delay = 1
        
    def create_pinned_message_with_retry(self, text: str, max_attempts: int = 3) -> Optional[int]:
        """–°–æ–∑–¥–∞—ë—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        print(f"üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫—Ä–µ–ø–∞ (–¥–æ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫)...")
        
        for attempt in range(1, max_attempts + 1):
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}...")
            
            try:
                message = self.bot.send_message(
                    chat_id=self.chat_id,
                    text=text,
                    parse_mode='HTML'
                )
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª–æ—Å—å
                try:
                    check = self.bot.get_chat(self.chat_id)
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —Å–æ–∑–¥–∞–Ω–æ")
                except:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                
                # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º
                self.bot.pin_chat_message(
                    chat_id=self.chat_id,
                    message_id=message.message_id,
                    disable_notification=True
                )
                
                print(f"‚úÖ –ó–∞–∫—Ä–µ–ø —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω: {message.message_id}")
                return message.message_id
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {e}")
                
                if attempt < max_attempts:
                    print(f"   –ñ–¥—ë–º 20 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(20)
        
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫—Ä–µ–ø –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return None
    
    def send_spread_message_with_buttons(self, text: str, pair: str) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ø—Ä–µ–¥–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏-—Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –±–∏—Ä–∂–∏"""
        try:
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            
            current_time = time.time()
            if current_time - self.last_message_time < self.message_delay:
                time.sleep(self.message_delay)
            
            mexc_url = f"https://www.mexc.com/ru-RU/futures/{pair}_USDT?type=linear_swap"
            gate_url = f"https://www.gate.com/ru/futures/USDT/{pair}_USDT"
            
            keyboard = [
                [
                    InlineKeyboardButton("MEXC", url=mexc_url),
                    InlineKeyboardButton("GATE", url=gate_url)
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = self.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
            self.last_message_time = current_time
            return message.message_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
            return self.send_spread_message(text)
        
    def update_spread_message_with_buttons(self, message_id: int, text: str, pair: str) -> tuple:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        try:
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            from telegram.error import BadRequest
            
            mexc_url = f"https://www.mexc.com/ru-RU/futures/{pair}_USDT?type=linear_swap"
            gate_url = f"https://www.gate.com/ru/futures/USDT/{pair}_USDT"
            
            keyboard = [
                [
                    InlineKeyboardButton("MEXC", url=mexc_url),
                    InlineKeyboardButton("GATE", url=gate_url)
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            self.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=message_id,
                text=text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return True, False
            
        except BadRequest as e:
            error_msg = str(e).lower()
            if "message to edit not found" in error_msg or "message_id_invalid" in error_msg:
                print(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–ª—è {pair} —É–¥–∞–ª–µ–Ω–æ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ß–°")
                return False, True
            elif "message is not modified" in error_msg:
                return True, False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {message_id}: {e}")
                return False, False
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {message_id}: {e}")
            return False, False
        
    def send_spread_message(self, text: str) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ø—Ä–µ–¥–µ"""
        try:
            current_time = time.time()
            if current_time - self.last_message_time < self.message_delay:
                time.sleep(self.message_delay)
            
            message = self.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode='HTML'
            )
            
            self.last_message_time = current_time
            return message.message_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return None
    
    def update_spread_message(self, message_id: int, text: str) -> tuple:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            from telegram.error import BadRequest
            
            self.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=message_id,
                text=text,
                parse_mode='HTML'
            )
            return True, False
            
        except BadRequest as e:
            error_msg = str(e).lower()
            if "message to edit not found" in error_msg or "message_id_invalid" in error_msg:
                print(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ")
                return False, False
            elif "message is not modified" in error_msg:
                return True, False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {message_id}: {e}")
                return False, False
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False, False
    
    def delete_spread_message(self, message_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            self.bot.delete_message(
                chat_id=self.chat_id,
                message_id=message_id
            )
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {message_id}: {e}")
            return False
    
    def send_message(self, text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            current_time = time.time()
            if current_time - self.last_message_time < self.message_delay:
                return
            
            if len(text) > 4000:
                text = text[:4000] + "..."
            
            self.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode='HTML'
            )
            
            self.last_message_time = current_time
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    def update_spread_message(self, message_id: int, text: str) -> tuple:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (success, should_ban)"""
        try:
            from telegram.error import BadRequest
            
            self.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=message_id,
                text=text,
                parse_mode='HTML'
            )
            return True, False
            
        except BadRequest as e:
            error_msg = str(e).lower()
            if "message to edit not found" in error_msg or "message_id_invalid" in error_msg:
                print(f"‚ö†Ô∏è –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return False, False  # –î–ª—è –∑–∞–∫—Ä–µ–ø–∞ –Ω–µ –±–∞–Ω–∏–º
            elif "message is not modified" in error_msg:
                return True, False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
                return False, False
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False, False
    
    def delete_spread_message(self, message_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            self.bot.delete_message(
                chat_id=self.chat_id,
                message_id=message_id
            )
            return True
            
        except TelegramError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def send_or_update_pinned_message(self, text: str, current_pinned_id: Optional[int]) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            if current_pinned_id:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
                success = self.update_spread_message(current_pinned_id, text)
                if success:
                    print(f"üìå –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {current_pinned_id}")
                    return current_pinned_id
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            message_id = self.send_spread_message(text)
            if message_id:
                # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    self.bot.pin_chat_message(
                        chat_id=self.chat_id,
                        message_id=message_id,
                        disable_notification=True
                    )
                    print(f"üìå –°–æ–∑–¥–∞–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
                    return message_id
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    return message_id
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {e}")
            return None
    
    def send_message(self, text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            current_time = time.time()
            if current_time - self.last_message_time < self.message_delay:
                return
            
            if len(text) > 4000:
                text = text[:4000] + "..."
            
            self.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode='HTML'
            )
            
            self.last_message_time = current_time
            
        except TelegramError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ Telegram: {e}")

class TwoExchangeMonitor:
    def __init__(self, telegram_notifier: Optional[TelegramNotifier] = None):
        # API –∫–ª—é—á–∏ –¥–ª—è Gate.io
        self.gate_api_key = "8e169592b4053b83201a6e7b35427d52"
        self.gate_secret = "7e302c757e323c9c0d138e655571bc3d5917c65144efe76287b024a9127f0f05"
        
        # –ü—Ä–æ–∫—Å–∏ –¥–ª—è Gate.io
        self.gate_proxy = {
            'http': 'socks5://kdbB2d:NdnT76dFNB@31.12.92.243:5501',
            'https': 'socks5://kdbB2d:NdnT76dFNB@31.12.92.243:5501'
        }
        
        # –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.pairs_file = "two_exchange_pairs.txt"
        self.verified_file = "verified_two_exchange_pairs.txt"
        
        # –ü–∞—Ä—ã –ø–æ –±–∏—Ä–∂–∞–º
        self.mexc_pairs = set()
        self.gate_pairs = set()
        
        # –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        self.mexc_prices = {}
        self.gate_prices = {}
        
        # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç—Ä–µ–∫–µ—Ä—ã —Å–ø—Ä–µ–¥–æ–≤
        self.telegram = telegram_notifier
        self.spread_tracker = SpreadTracker()
        self.daily_tracker = DailySpreadTracker()
        
        # –ö—ç—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö MEXC (–¥–ª—è priceScale)
        self.mexc_contracts_info = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
        self._setup_sessions()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä
        self.last_pairs_update = 0
        self.pairs_update_interval = 10  # –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        self.verified_coverage_cache = {}
        self.verified_coverage_last_update = 0 
        
    def manage_pinned_messages(self, max_pins=30):
        """–£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–∫—Ä–µ–ø—ã –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ"""
        if not self.telegram:
            return False
            
        try:
            print(f"üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            from telegram import Bot
            from telegram.error import TelegramError
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            moscow_tz = timezone(timedelta(hours=3))
            current_date = datetime.now(moscow_tz).strftime('%d.%m.%Y')
            today_pin_text = f"–°–ü–†–ï–î–´ –ó–ê –î–ï–ù–¨ {current_date}"
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                chat = self.telegram.bot.get_chat(self.telegram.chat_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                pinned_messages = []
                updates = self.telegram.bot.get_updates(limit=1000)  # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                
                # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                for update in updates:
                    if hasattr(update, 'channel_post') and update.channel_post and update.channel_post.chat.id == int(self.telegram.chat_id):
                        if update.channel_post.pinned_message:
                            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ
                            pinned_msg = update.channel_post.pinned_message
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –∑–∞–∫—Ä–µ–ø–æ–º —Å–æ —Å–ø—Ä–µ–¥–∞–º–∏
                            is_today_pin = False
                            if pinned_msg.text and today_pin_text in pinned_msg.text:
                                is_today_pin = True
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∏–ª–∏ –Ω–µ—Ç
                            pinned_messages.append({
                                'message_id': pinned_msg.message_id,
                                'date': pinned_msg.date,
                                'is_today_pin': is_today_pin
                            })
                
                # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–∫—Ä–µ–ø–æ–≤
                if len(pinned_messages) > max_pins:
                    print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(pinned_messages)} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ...")
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
                    pinned_messages.sort(key=lambda x: x['date'])
                    
                    # –í—ã–¥–µ–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∑–∞–∫—Ä–µ–ø
                    today_pins = [msg for msg in pinned_messages if msg['is_today_pin']]
                    other_pins = [msg for msg in pinned_messages if not msg['is_today_pin']]
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–∫—Ä–µ–ø–æ–≤ –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å
                    pins_to_unpin = len(pinned_messages) - max_pins
                    if pins_to_unpin > 0:
                        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ, –Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π
                        for i in range(min(pins_to_unpin, len(other_pins))):
                            try:
                                self.telegram.bot.unpin_chat_message(
                                    chat_id=self.telegram.chat_id,
                                    message_id=other_pins[i]['message_id']
                                )
                                print(f"üìå –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {other_pins[i]['message_id']}")
                            except Exception as e:
                                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ {other_pins[i]['message_id']}: {e}")
                    
                    return True
                else:
                    print(f"‚úÖ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(pinned_messages)}/{max_pins}")
                    return False
            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–∞–º–∏: {e}")
            return False        
        
    def calculate_mexc_max_position_limit(self, pair: str) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT –¥–ª—è –ø–∞—Ä—ã"""
        try:
            print(f"\nüí∞ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç –ª–∏–º–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {pair}")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
            if pair not in self.mexc_contracts_info:
                print(f"‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –¥–ª—è {pair}")
                return 0
            
            contract_info = self.mexc_contracts_info[pair]
            contract_size = contract_info.get('contractSize')
            
            print(f"üìã –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è {pair}: {contract_size} –º–æ–Ω–µ—Ç/–∫–æ–Ω—Ç—Ä–∞–∫—Ç")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º maxVol –∏–∑ API –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            try:
                symbol = f"{pair}_USDT"
                url = 'https://contract.mexc.com/api/v1/contract/detail'
                
                response = self.mexc_session.get(url, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('success') and data.get('data'):
                        for contract in data['data']:
                            if contract.get('symbol') == symbol:
                                max_vol = float(contract.get('maxVol', 0))
                                print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è {pair}: {max_vol}")
                                
                                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                                mexc_price = self._get_mexc_price(pair)
                                if not mexc_price:
                                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {pair}")
                                    return 0
                                    
                                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –≤ USDT
                                max_tokens = max_vol * contract_size
                                max_usdt = max_tokens * mexc_price
                                
                                print(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è {pair}: {int(max_usdt)} USDT")
                                return int(max_usdt)
                
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å maxVol –¥–ª—è {pair}")
                return 0
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏: {str(e)}")
                return 0
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è {pair}: {str(e)}")
            import traceback
            print(f"   –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return 0    
        
    def check_duplicate_spreads(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–ø—Ä–µ–¥—ã –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Ç–∏–∫–µ—Ä–∞"""
        active_spreads = self.spread_tracker.get_active_spreads()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ø—Ä–µ–¥—ã –ø–æ –ø–∞—Ä–∞–º
        pairs_count = {}
        for pair in active_spreads:
            pairs_count[pair] = pairs_count.get(pair, 0) + 1
        
        # –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (—Ç–∏–∫–µ—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º > 1)
        duplicates = {pair: count for pair, count in pairs_count.items() if count > 1}
        
        if not duplicates:
            return False
        
        print(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} —Ç–∏–∫–µ—Ä–æ–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: {', '.join(duplicates.keys())}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–∫–µ—Ä —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
        for pair, count in duplicates.items():
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
            pair_messages = []
            for active_pair, data in active_spreads.items():
                if active_pair == pair:
                    last_update_time = data.get('last_update', 0)
                    message_id = data.get('message_id')
                    pair_messages.append((message_id, last_update_time))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
            pair_messages.sort(key=lambda x: x[1], reverse=True)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π, —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            newest_message = pair_messages[0][0]
            messages_to_delete = [msg_id for msg_id, _ in pair_messages[1:]]
            
            print(f"‚úÖ –î–ª—è {pair} –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {newest_message}, —É–¥–∞–ª—è–µ–º {len(messages_to_delete)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –æ —Å–ø—Ä–µ–¥–∞—Ö
            for msg_id in messages_to_delete:
                if self.telegram:
                    self.telegram.delete_spread_message(msg_id)
                    print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}")
                
                # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø—Ä–µ–¥ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                for active_pair, data in list(active_spreads.items()):
                    if active_pair == pair and data.get('message_id') == msg_id:
                        self.spread_tracker.stop_tracking_spread(active_pair, 'duplicate_removed')
                        print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ —Å–ø—Ä–µ–¥–µ {active_pair} (—Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id})")
        
        return True
    
    def check_stale_messages(self, max_idle_time=60):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ"""
        active_spreads = self.spread_tracker.get_active_spreads()
        current_time = time.time()
        stale_messages = []
        
        for pair, data in list(active_spreads.items()):
            last_update = data.get('last_update', 0)
            idle_time = current_time - last_update
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å –±–æ–ª–µ–µ X —Å–µ–∫—É–Ω–¥, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –∑–∞–≤–∏—Å—à–∏–º
            if idle_time > max_idle_time:
                message_id = data.get('message_id')
                stale_messages.append((pair, message_id, idle_time))
        
        if not stale_messages:
            return False
        
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(stale_messages)} –∑–∞–≤–∏—Å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:")
        
        for pair, message_id, idle_time in stale_messages:
            print(f"   üïí {pair}: —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å {idle_time:.1f}—Å")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –æ —Å–ø—Ä–µ–¥–µ
            if self.telegram:
                self.telegram.delete_spread_message(message_id)
                print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–≤–∏—Å—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
            
            self.spread_tracker.stop_tracking_spread(pair, 'stale_message')
            print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –∑–∞–≤–∏—Å—à–µ–º —Å–ø—Ä–µ–¥–µ {pair}")
        
        return True
        
    def initialize_daily_spreads_message(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        if not self.telegram:
            return
        
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ —Å–ø—Ä–µ–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.daily_tracker.should_reset_daily_spreads():
            self.daily_tracker.reset_daily_spreads()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫—Ä–µ–ø
        existing_pin = self.daily_tracker.try_find_existing_pin(self.telegram, max_attempts=5)
        
        if existing_pin:
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫—Ä–µ–ø {existing_pin}")
            self.daily_tracker.pin_created_today = True
            return
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        if self.daily_tracker.can_create_pin_today():
            message_text = self.daily_tracker.format_daily_spreads_message()
            message_id = self.telegram.create_pinned_message_with_retry(message_text, max_attempts=3)
            
            if message_id:
                self.daily_tracker.pinned_message_id = message_id
                self.daily_tracker.pin_created_today = True
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫—Ä–µ–ø {message_id} –¥–ª—è {self.daily_tracker.current_date_for_pin}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫—Ä–µ–ø –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        else:
            print("‚ö†Ô∏è –ó–∞–∫—Ä–µ–ø —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
        
        self.daily_tracker.pin_initialized = True    
        
    def initialize_daily_spreads_message(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        if not self.telegram:
            return
        
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ —Å–ø—Ä–µ–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.daily_tracker.should_reset_daily_spreads():
            self.daily_tracker.reset_daily_spreads()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫—Ä–µ–ø
        existing_pin = self.daily_tracker.try_find_existing_pin(self.telegram, max_attempts=5)
        
        if existing_pin:
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫—Ä–µ–ø {existing_pin}")
            self.daily_tracker.pin_created_today = True
            return
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        if self.daily_tracker.can_create_pin_today():
            message_text = self.daily_tracker.format_daily_spreads_message()
            message_id = self.telegram.create_pinned_message_with_retry(message_text, max_attempts=3)
            
            if message_id:
                self.daily_tracker.pinned_message_id = message_id
                self.daily_tracker.pin_created_today = True
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫—Ä–µ–ø {message_id} –¥–ª—è {self.daily_tracker.current_date_for_pin}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫—Ä–µ–ø –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        else:
            print("‚ö†Ô∏è –ó–∞–∫—Ä–µ–ø —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
        
        self.daily_tracker.pin_initialized = True
        
    def _setup_sessions(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP —Å–µ—Å—Å–∏–π"""
        # –°–µ—Å—Å–∏—è –¥–ª—è MEXC (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)
        self.mexc_session = requests.Session()
        self.mexc_session.verify = False
        
        # –°–µ—Å—Å–∏—è –¥–ª—è Gate.io (—Å –ø—Ä–æ–∫—Å–∏)
        self.gate_session = requests.Session()
        self.gate_session.proxies = self.gate_proxy
        self.gate_session.verify = False
        
        print("‚úÖ HTTP —Å–µ—Å—Å–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –¥–≤—É—Ö –±–∏—Ä–∂")
    
    def get_mexc_contracts_info(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö MEXC –≤–∫–ª—é—á–∞—è priceScale –∏ contractSize"""
        try:
            print("üîç –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö MEXC...")
            
            url = 'https://contract.mexc.com/api/v1/contract/detail'
            
            response = self.mexc_session.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('success') and data.get('data'):
                    contracts_info = {}
                    for contract in data['data']:
                        symbol = contract.get('symbol')
                        if symbol and symbol.endswith('_USDT'):
                            base_symbol = symbol.replace('_USDT', '')
                            contracts_info[base_symbol] = {
                                'priceScale': contract.get('priceScale'),
                                'contractSize': contract.get('contractSize'),  # –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                                'symbol': symbol
                            }
                    
                    print(f"‚úÖ MEXC: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(contracts_info)} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö")
                    self.mexc_contracts_info = contracts_info
                    return contracts_info
                else:
                    print(f"‚ùå MEXC contract detail API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {data}")
                    return {}
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ MEXC: HTTP {response.status_code}")
                return {}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ MEXC: {str(e)}")
            return {}
    
    def get_mexc_order_book(self, pair: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞–∫–∞–Ω MEXC –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ–±—ä—ë–º–∞ 5 –±–∏–¥–æ–≤"""
        try:
            symbol = f"{pair}_USDT"
            url = f'https://contract.mexc.com/api/v1/contract/depth/{symbol}'
            
            print(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞–∫–∞–Ω MEXC –¥–ª—è {symbol}: {url}")
            
            response = self.mexc_session.get(url, timeout=10)
            
            print(f"üìä –û—Ç–≤–µ—Ç MEXC —Å—Ç–∞–∫–∞–Ω {symbol}: HTTP {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω JSON –æ—Ç–≤–µ—Ç –¥–ª—è {symbol}")
                print(f"   –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(data.keys())}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
                if not data.get('success'):
                    print(f"‚ùå API –≤–µ—Ä–Ω—É–ª success=False –¥–ª—è {symbol}")
                    print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {data.get('code')}")
                    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
                    return None
                
                # –î–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ data.data —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É
                if 'data' not in data:
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'data' –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è {symbol}")
                    return None
                
                order_book_data = data['data']
                print(f"   –ö–ª—é—á–∏ –≤ data: {list(order_book_data.keys())}")
                
                if 'bids' in order_book_data:
                    bids_count = len(order_book_data['bids'])
                    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–¥–æ–≤: {bids_count}")
                    
                    if bids_count > 0:
                        print(f"   –ü–µ—Ä–≤—ã–µ 3 –±–∏–¥–∞:")
                        for i, bid in enumerate(order_book_data['bids'][:3]):
                            print(f"     –ë–∏–¥ {i+1}: {bid} (—Ç–∏–ø: {type(bid)})")
                    else:
                        print(f"   ‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –±–∏–¥–æ–≤ –ø—É—Å—Ç!")
                else:
                    print(f"   ‚ùå –ö–ª—é—á 'bids' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ data!")
                    print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ data: {list(order_book_data.keys())}")
                
                if 'asks' in order_book_data:
                    asks_count = len(order_book_data['asks'])
                    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Å–∫–æ–≤: {asks_count}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞, –∞ –Ω–µ –≤–µ—Å—å –æ—Ç–≤–µ—Ç
                return order_book_data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ {symbol}: HTTP {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error_data}")
                except:
                    print(f"   –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}")
                return None
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞–Ω–∞ MEXC –¥–ª—è {pair}: {str(e)}")
            import traceback
            print(f"   –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return None
    
    def calculate_mexc_5_bids_volume(self, pair: str) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—ä—ë–º 9 –±–∏–¥–æ–≤ MEXC –≤ USDT —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        try:
            print(f"\nüí∞ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç –æ–±—ä—ë–º–∞ 9 –±–∏–¥–æ–≤ –¥–ª—è {pair}")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
            if pair not in self.mexc_contracts_info:
                print(f"‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –¥–ª—è {pair}")
                return 0
            
            contract_info = self.mexc_contracts_info[pair]
            contract_size = contract_info.get('contractSize')
            
            print(f"üìã –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è {pair}: {contract_size} –º–æ–Ω–µ—Ç/–∫–æ–Ω—Ç—Ä–∞–∫—Ç")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤
            order_book = self.get_mexc_order_book(pair)
            if not order_book:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –¥–ª—è {pair}")
                return 0
            
            if 'bids' not in order_book:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'bids' –≤ —Å—Ç–∞–∫–∞–Ω–µ –¥–ª—è {pair}")
                return 0
            
            bids = order_book['bids']
            bids_count = len(bids)
            
            print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–¥–æ–≤: {bids_count}")
            
            if bids_count == 0:
                print(f"‚ùå –°–ø–∏—Å–æ–∫ –±–∏–¥–æ–≤ –ø—É—Å—Ç –¥–ª—è {pair}")
                return 0
            
            total_volume_usdt = 0.0
            bids_to_process = min(9, bids_count)
            
            print(f"üî¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {bids_to_process} –±–∏–¥–æ–≤:")
            
            # 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä—ë–º –∫–∞–∂–¥–æ–≥–æ –±–∏–¥–∞
            for i in range(bids_to_process):
                bid = bids[i]
                
                if not isinstance(bid, (list, tuple)) or len(bid) < 2:
                    print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∏–¥–∞: {bid}")
                    continue
                
                try:
                    price = float(bid[0])              # –¶–µ–Ω–∞ –∑–∞ 1 –º–æ–Ω–µ—Ç—É –≤ USDT
                    quantity_contracts = float(bid[1]) # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö–û–ù–¢–†–ê–ö–¢–û–í
                    
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ –º–æ–Ω–µ—Ç—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ √ó —Ä–∞–∑–º–µ—Ä_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                    quantity_coins = quantity_contracts * contract_size
                    
                    # –û–±—ä—ë–º –≤ USDT = —Ü–µ–Ω–∞ √ó –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
                    volume_usdt = price * quantity_coins
                    total_volume_usdt += volume_usdt
                    
                    print(f"   –ë–∏–¥ {i+1}: {quantity_contracts} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ √ó {contract_size} = {quantity_coins} –º–æ–Ω–µ—Ç")
                    print(f"   –û–±—ä—ë–º: {price} √ó {quantity_coins} = {volume_usdt:.2f} USDT")
                    print(f"   –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –æ–±—ä—ë–º: {total_volume_usdt:.2f} USDT")
                    
                except (ValueError, TypeError, IndexError) as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∏–¥–∞ {i+1}: {e}")
                    continue
            
            final_volume = int(total_volume_usdt)
            print(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –æ–±—ä—ë–º 9 –±–∏–¥–æ–≤ –¥–ª—è {pair}: {total_volume_usdt:.2f} USDT ‚Üí {final_volume} USDT")
            
            return final_volume
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –æ–±—ä—ë–º–∞ –¥–ª—è {pair}: {str(e)}")
            import traceback
            print(f"   –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return 0
    
    def format_price_by_scale(self, price: float, pair: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å–æ–≥–ª–∞—Å–Ω–æ priceScale –∏–∑ API MEXC"""
        if pair in self.mexc_contracts_info:
            price_scale = self.mexc_contracts_info[pair]['priceScale']
            return f"{price:.{price_scale}f}"
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ priceScale, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return str(price)
    
    def generate_gate_signature(self, method: str, url: str, query_string: str = "", body: str = "") -> dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è Gate.io API"""
        timestamp = str(int(time.time()))
        sign_str = f"{method}\n{url}\n{query_string}\n{hashlib.sha512(body.encode()).hexdigest()}\n{timestamp}"
        signature = hmac.new(
            self.gate_secret.encode(),
            sign_str.encode(),
            hashlib.sha512
        ).hexdigest()
        
        return {
            'KEY': self.gate_api_key,
            'Timestamp': timestamp,
            'SIGN': signature
        }
    
    def get_mexc_contracts(self) -> Set[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ MEXC"""
        try:
            print("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ MEXC...")
            
            url = 'https://futures.mexc.com/api/v1/contract/ticker'
            
            response = self.mexc_session.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('success') and data.get('data'):
                    contracts = set()
                    for contract in data['data']:
                        symbol = contract.get('symbol')
                        if symbol and symbol.endswith('_USDT'):
                            # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—É—Ñ—Ñ–∏–∫—Å _USDT –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            base_symbol = symbol.replace('_USDT', '')
                            contracts.add(base_symbol)
                    
                    print(f"‚úÖ MEXC: –Ω–∞–π–¥–µ–Ω–æ {len(contracts)} USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
                    return contracts
                else:
                    print(f"‚ùå MEXC API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {data}")
                    return set()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ MEXC: HTTP {response.status_code}")
                return set()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ MEXC: {str(e)}")
            return set()
    
    def get_gate_contracts(self) -> Set[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ Gate.io"""
        try:
            print("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ Gate.io...")
            
            url = '/api/v4/futures/usdt/contracts'
            
            headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
            
            response = self.gate_session.get(
                f"https://api.gateio.ws{url}",
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                
                if isinstance(data, list):
                    contracts = set()
                    for contract in data:
                        name = contract.get('name')
                        if name and name.endswith('_USDT'):
                            # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å _USDT –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            base_symbol = name.replace('_USDT', '')
                            contracts.add(base_symbol)
                    
                    print(f"‚úÖ Gate.io: –Ω–∞–π–¥–µ–Ω–æ {len(contracts)} USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
                    return contracts
                else:
                    print(f"‚ùå Gate.io API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {type(data)}")
                    return set()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ Gate.io: HTTP {response.status_code}")
                return set()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ Gate.io: {str(e)}")
            return set()
    
    def find_pairs_coverage(self, force_refresh: bool = False) -> Dict[str, List[str]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä –ø–æ –±–∏—Ä–∂–∞–º"""
        print("üîç DEBUG: –ù–∞—á–∞–ª–æ find_pairs_coverage")
        
        if not force_refresh:
            print("üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞")
            file_age = self.get_file_age_hours()
            print(f"üîç DEBUG: –í–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞: {file_age}")
            
            if file_age is not None and file_age < 12:
                print("üîç DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞")
                coverage = self.load_coverage_from_file()
                print(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(coverage) if coverage else 0} –ø–∞—Ä")
                if coverage:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö –¥–ª—è priceScale
                    self.get_mexc_contracts_info()
                    print("üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã...")
                    verified_coverage = self.verify_pairs_prices(coverage, False)
                    print(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(verified_coverage)} –ø–∞—Ä")
                    return verified_coverage
        
        print("üîç DEBUG: –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö MEXC –¥–ª—è priceScale
        self.get_mexc_contracts_info()
        
        self.mexc_pairs = self.get_mexc_contracts()
        self.gate_pairs = self.get_gate_contracts()
        
        if not self.mexc_pairs and not self.gate_pairs:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∏ —Å –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏")
            return {}
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ –æ–±–µ–∏—Ö –±–∏—Ä–∂–∞—Ö
        common_pairs = self.mexc_pairs & self.gate_pairs
        
        if not common_pairs:
            print("‚ùå –ù–µ—Ç –æ–±—â–∏—Ö –ø–∞—Ä –º–µ–∂–¥—É MEXC –∏ Gate.io")
            return {}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
        potential_coverage = {}
        for pair in common_pairs:
            potential_coverage[pair] = ['MEXC', 'Gate.io']
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–∞—Ä (–ø–æ —Å–ø–∏—Å–∫–∞–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤):")
        print(f"   MEXC: {len(self.mexc_pairs)} –ø–∞—Ä")
        print(f"   Gate.io: {len(self.gate_pairs)} –ø–∞—Ä")
        print(f"   –û–±—â–∏—Ö –ø–∞—Ä: {len(common_pairs)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –æ–±—â–∏—Ö –ø–∞—Ä
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ü–µ–Ω –¥–ª—è {len(potential_coverage)} –æ–±—â–∏—Ö –ø–∞—Ä...")
        verified_coverage = self.verify_pairs_prices(potential_coverage, True)
        
        if not verified_coverage:
            print("‚ùå –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–∞–±–æ—á–∏—Ö –ø–∞—Ä")
            return {}
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
        print(f"\n‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ (–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω):")
        print(f"   –†–∞–±–æ—á–∏—Ö –ø–∞—Ä: {len(verified_coverage)}")
        print(f"   –û—Ç—Å–µ—è–Ω–æ –Ω–µ—Ä–∞–±–æ—á–∏—Ö: {len(potential_coverage) - len(verified_coverage)} –ø–∞—Ä")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–û–õ–¨–ö–û –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
        self.save_coverage_to_file(verified_coverage)
        self.save_verified_coverage(verified_coverage)
        
        return verified_coverage
    
    def save_coverage_to_file(self, coverage: Dict[str, List[str]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.pairs_file, 'w', encoding='utf-8') as f:
                f.write(f"# –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä MEXC –∏ Gate.io\n")
                f.write(f"# –°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"# –í—Å–µ–≥–æ –ø–∞—Ä –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {len(coverage)}\n")
                f.write(f"# –§–æ—Ä–º–∞—Ç: —Å–∏–º–≤–æ–ª –±–∏—Ä–∂–∞1,–±–∏—Ä–∂–∞2\n\n")
                
                for pair in sorted(coverage.keys()):
                    exchanges = ','.join(coverage[pair])
                    f.write(f"{pair} {exchanges}\n")
            
            print(f"üíæ –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {self.pairs_file}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è: {str(e)}")
    
    def load_coverage_from_file(self) -> Optional[Dict[str, List[str]]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            import os
            
            if not os.path.exists(self.pairs_file):
                return None
            
            with open(self.pairs_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            coverage = {}
            for line in lines:
                line = line.strip()
                if line and not line.startswith('#'):
                    parts = line.split(' ', 1)
                    if len(parts) == 2:
                        pair = parts[0]
                        exchanges = parts[1].split(',')
                        coverage[pair] = exchanges
            
            print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è {len(coverage)} –ø–∞—Ä –∏–∑ —Ñ–∞–π–ª–∞")
            return coverage
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è: {str(e)}")
            return None
    
    def get_file_age_hours(self) -> Optional[float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞ –≤ —á–∞—Å–∞—Ö"""
        try:
            import os
            
            if not os.path.exists(self.pairs_file):
                return None
            
            file_time = os.path.getmtime(self.pairs_file)
            current_time = time.time()
            age_hours = (current_time - file_time) / 3600
            
            return age_hours
            
        except Exception:
            return None
    
    def verify_pairs_prices(self, coverage: Dict[str, List[str]], force_verify: bool = False) -> Dict[str, List[str]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ü–µ–Ω –¥–ª—è –ø–∞—Ä –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–∞–±–æ—á–∏–µ"""
        
        if not force_verify:
            verified_coverage = self.load_verified_coverage()
            if verified_coverage:
                if set(coverage.keys()).issubset(set(verified_coverage.keys())):
                    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –∫—ç—à–∞")
                    return verified_coverage
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ü–µ–Ω –¥–ª—è {len(coverage)} –ø–∞—Ä...")
        
        verified_coverage = {}
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
        pairs_list = list(coverage.keys())
        batch_size = 10
        batches = [pairs_list[i:i + batch_size] for i in range(0, len(pairs_list), batch_size)]
        
        for batch_num, batch in enumerate(batches, 1):
            print(f"üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞—Ç—á {batch_num}/{len(batches)} ({len(batch)} –ø–∞—Ä)...")
            batch_start_time = time.time()
            
            batch_results = {}
            
            with ThreadPoolExecutor(max_workers=5) as executor:
                future_to_pair = {
                    executor.submit(self._verify_single_pair_with_timeout, pair, coverage[pair]): pair 
                    for pair in batch
                }
                
                completed = 0
                for future in as_completed(future_to_pair, timeout=60):
                    pair = future_to_pair[future]
                    completed += 1
                    
                    try:
                        working_exchanges = future.result(timeout=15)
                        if len(working_exchanges) >= 2:
                            batch_results[pair] = working_exchanges
                            print(f"‚úÖ {pair}: {','.join(working_exchanges)}")
                        else:
                            print(f"‚ùå {pair}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ä–∂ ({','.join(working_exchanges) if working_exchanges else '–Ω–µ—Ç'})")
                    except Exception as e:
                        print(f"‚ùå {pair}: –æ—à–∏–±–∫–∞ - {str(e)[:100]}")
            
            verified_coverage.update(batch_results)
            
            batch_time = time.time() - batch_start_time
            print(f"üìä –ë–∞—Ç—á {batch_num}: ‚úÖ{len(batch_results)} –∑–∞ {batch_time:.1f}—Å")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if batch_num < len(batches):
                print("‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
                time.sleep(3)
        
        print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print(f"   ‚úÖ –†–∞–±–æ—á–∏—Ö –ø–∞—Ä: {len(verified_coverage)}")
        print(f"   ‚ùå –ù–µ—Ä–∞–±–æ—á–∏—Ö –ø–∞—Ä: {len(coverage) - len(verified_coverage)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.save_verified_coverage(verified_coverage)
        
        return verified_coverage
    
    def _verify_single_pair_with_timeout(self, pair: str, exchanges: List[str]) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É –ø–∞—Ä—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏"""
        working_exchanges = []
        
        for exchange in exchanges:
            try:
                if exchange == 'MEXC':
                    price = self._get_mexc_price_quick(pair)
                elif exchange == 'Gate.io':
                    price = self._get_gate_price_quick(pair)
                else:
                    continue
                
                if price is not None and price > 0:
                    working_exchanges.append(exchange)
                    
            except Exception:
                continue
        
        return working_exchanges
    
    def _get_mexc_price_quick(self, pair: str) -> Optional[float]:
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å MEXC (—Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º)"""
        try:
            if not hasattr(self, '_mexc_all_tickers') or time.time() - getattr(self, '_mexc_last_update', 0) > 60:
                self._update_mexc_tickers_quick()
            
            symbol = f"{pair}_USDT"
            return self._mexc_all_tickers.get(symbol)
            
        except Exception:
            return None
    
    def _update_mexc_tickers_quick(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ MEXC —Ç–∏–∫–µ—Ä–æ–≤"""
        try:
            url = 'https://futures.mexc.com/api/v1/contract/ticker'
            response = self.mexc_session.get(url, timeout=8)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success') and data.get('data'):
                    self._mexc_all_tickers = {}
                    for ticker in data['data']:
                        symbol = ticker.get('symbol')
                        last_price = ticker.get('lastPrice')
                        if symbol and last_price:
                            self._mexc_all_tickers[symbol] = float(last_price)
                    
                    self._mexc_last_update = time.time()
        except Exception:
            if not hasattr(self, '_mexc_all_tickers'):
                self._mexc_all_tickers = {}
    
    def _get_gate_price_quick(self, pair: str) -> Optional[float]:
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å Gate.io"""
        try:
            contract = f"{pair}_USDT"
            url = f'https://api.gateio.ws/api/v4/futures/usdt/contracts/{contract}'
            
            headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
            
            response = self.gate_session.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                return float(data.get('last_price', 0))
            return None
            
        except Exception:
            return None
    
    def save_verified_coverage(self, coverage: Dict[str, List[str]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.verified_file, 'w', encoding='utf-8') as f:
                f.write(f"# –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä\n")
                f.write(f"# –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"# –†–∞–±–æ—á–∏—Ö –ø–∞—Ä: {len(coverage)}\n\n")
                
                for pair in sorted(coverage.keys()):
                    exchanges = ','.join(coverage[pair])
                    f.write(f"{pair} {exchanges}\n")
            
            print(f"üíæ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {self.verified_file}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è: {str(e)}")
    
    def load_verified_coverage(self) -> Optional[Dict[str, List[str]]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            import os
            
            if not os.path.exists(self.verified_file):
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞
            file_age = (time.time() - os.path.getmtime(self.verified_file)) / 3600
            if file_age > 6:  # –ï—Å–ª–∏ —Å—Ç–∞—Ä—à–µ 6 —á–∞—Å–æ–≤
                return None
            
            with open(self.verified_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            coverage = {}
            for line in lines:
                line = line.strip()
                if line and not line.startswith('#'):
                    parts = line.split(' ', 1)
                    if len(parts) == 2:
                        pair = parts[0]
                        exchanges = parts[1].split(',')
                        coverage[pair] = exchanges
            
            print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è {len(coverage)} –ø–∞—Ä (–≤–æ–∑—Ä–∞—Å—Ç: {file_age:.1f}—á)")
            return coverage
            
        except Exception:
            return None
    
    def _get_mexc_price(self, pair: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å MEXC"""
        try:
            if not hasattr(self, '_mexc_all_tickers') or time.time() - getattr(self, '_mexc_last_update', 0) > 10:
                self._update_mexc_tickers()
            
            symbol = f"{pair}_USDT"
            return self._mexc_all_tickers.get(symbol)
            
        except Exception:
            return None
    
    def _update_mexc_tickers(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Ç–∏–∫–µ—Ä—ã MEXC"""
        try:
            url = 'https://futures.mexc.com/api/v1/contract/ticker'
            response = self.mexc_session.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success') and data.get('data'):
                    self._mexc_all_tickers = {}
                    for ticker in data['data']:
                        symbol = ticker.get('symbol')
                        last_price = ticker.get('lastPrice')
                        if symbol and last_price:
                            self._mexc_all_tickers[symbol] = float(last_price)
                    
                    self._mexc_last_update = time.time()
                    print(f"‚úÖ MEXC: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(self._mexc_all_tickers)} —Ç–∏–∫–µ—Ä–æ–≤")
                else:
                    print(f"‚ùå MEXC API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            else:
                print(f"‚ùå MEXC API –æ—à–∏–±–∫–∞: HTTP {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MEXC —Ç–∏–∫–µ—Ä–æ–≤: {str(e)}")
            if not hasattr(self, '_mexc_all_tickers'):
                self._mexc_all_tickers = {}
    
    def _get_gate_price(self, pair: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å Gate.io"""
        try:
            contract = f"{pair}_USDT"
            url = f'https://api.gateio.ws/api/v4/futures/usdt/contracts/{contract}'
            
            headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
            
            response = self.gate_session.get(url, headers=headers, timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                return float(data.get('last_price', 0))
            return None
            
        except Exception:
            return None
    
    def get_current_prices(self, coverage: Dict[str, List[str]]) -> Dict[str, Dict[str, float]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö + –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–∞—Ä—ã"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä—ã
        self.check_and_update_pairs_coverage()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—ç—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if hasattr(self, 'verified_coverage_cache') and self.verified_coverage_cache:
            coverage = self.verified_coverage_cache
        
        print(f"üìÑ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è {len(coverage)} –ø–∞—Ä...")
        prices = {'MEXC': {}, 'Gate.io': {}}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã MEXC
        print("üìä –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã MEXC...")
        start_time = time.time()
        self._update_mexc_tickers()
        mexc_time = time.time() - start_time
        print(f"‚úÖ MEXC —Ç–∏–∫–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞ {mexc_time:.2f}—Å")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è MEXC –∏–∑ –∫—ç—à–∞
        for pair, exchanges in coverage.items():
            if 'MEXC' in exchanges and not self.spread_tracker.is_ticker_banned(pair):
                symbol = f"{pair}_USDT"
                if symbol in getattr(self, '_mexc_all_tickers', {}):
                    prices['MEXC'][pair] = self._mexc_all_tickers[symbol]
                    self.spread_tracker.reset_price_failure(pair)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
                else:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ç–∏–∫–µ—Ä –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–µ–¥–∞—Ö –∏–ª–∏ –Ω–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ä
                    if (pair not in self.spread_tracker.get_active_spreads() or 
                        not self.spread_tracker.get_active_spreads().get(pair, {}).get('is_new_ticker')):
                        self.spread_tracker.increment_price_failure(pair)
        
        print(f"‚úÖ MEXC: –ø–æ–ª—É—á–µ–Ω–æ {len(prices['MEXC'])} —Ü–µ–Ω")
        
        # –î–ª—è Gate.io –¥–µ–ª–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        gate_pairs = [pair for pair, exchanges in coverage.items() 
                     if 'Gate.io' in exchanges and not self.spread_tracker.is_ticker_banned(pair)]
        
        if gate_pairs:
            print(f"üìä –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã Gate.io –¥–ª—è {len(gate_pairs)} –ø–∞—Ä...")
            start_time = time.time()
            
            with ThreadPoolExecutor(max_workers=20) as executor:
                gate_futures = {
                    executor.submit(self._get_gate_price, pair): pair 
                    for pair in gate_pairs
                }
                
                completed = 0
                for future in as_completed(gate_futures, timeout=25):
                    pair = gate_futures[future]
                    completed += 1
                    try:
                        price = future.result()
                        if price:
                            prices['Gate.io'][pair] = price
                            self.spread_tracker.reset_price_failure(pair)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
                        else:
                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ç–∏–∫–µ—Ä –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–µ–¥–∞—Ö –∏–ª–∏ –Ω–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ä
                            if (pair not in self.spread_tracker.get_active_spreads() or 
                                not self.spread_tracker.get_active_spreads().get(pair, {}).get('is_new_ticker')):
                                self.spread_tracker.increment_price_failure(pair)
                    except Exception as e:
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –ø—Ä–∏ –æ—à–∏–±–∫–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ç–∏–∫–µ—Ä –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–µ–¥–∞—Ö –∏–ª–∏ –Ω–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ä
                        if (pair not in self.spread_tracker.get_active_spreads() or 
                            not self.spread_tracker.get_active_spreads().get(pair, {}).get('is_new_ticker')):
                            self.spread_tracker.increment_price_failure(pair)
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {pair} —Å Gate.io: {str(e)[:100]}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ø–∞—Ä
                    if completed % 100 == 0:
                        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ Gate.io: {completed}/{len(gate_pairs)}")
            
            gate_time = time.time() - start_time
            print(f"‚úÖ Gate.io: –ø–æ–ª—É—á–µ–Ω–æ {len(prices['Gate.io'])} —Ü–µ–Ω –∑–∞ {gate_time:.2f}—Å")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = mexc_time + (gate_time if gate_pairs else 0)
        print(f"üìä –ò–¢–û–ì–û –ø–æ–ª—É—á–µ–Ω–æ —Ü–µ–Ω: MEXC: {len(prices['MEXC'])}, Gate.io: {len(prices['Gate.io'])}")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {total_time:.2f}—Å")
        
        return prices
    
    def check_active_spreads_prices(self) -> Dict[str, Dict]:
        """–ë—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤"""
        active_spreads = self.spread_tracker.get_active_spreads()
        if not active_spreads:
            return {}
        
        active_pairs = list(active_spreads.keys())
        print(f"‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –¥–ª—è {len(active_pairs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤")
        
        prices = {'MEXC': {}, 'Gate.io': {}}
        mexc_failures = {}
        gate_failures = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã MEXC –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
        for pair in active_pairs:
            mexc_price = self._get_mexc_price(pair)
            if mexc_price and mexc_price > 0:
                prices['MEXC'][pair] = mexc_price
            else:
                mexc_failures[pair] = mexc_failures.get(pair, 0) + 1
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã Gate.io –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        with ThreadPoolExecutor(max_workers=10) as executor:
            gate_futures = {
                executor.submit(self._get_gate_price, pair): pair 
                for pair in active_pairs
            }
            
            for future in as_completed(gate_futures, timeout=15):
                pair = gate_futures[future]
                try:
                    gate_price = future.result()
                    if gate_price and gate_price > 0:
                        prices['Gate.io'][pair] = gate_price
                    else:
                        gate_failures[pair] = gate_failures.get(pair, 0) + 1
                except Exception:
                    gate_failures[pair] = gate_failures.get(pair, 0) + 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ—É–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
        pairs_to_remove = []
        for pair in active_pairs:
            mexc_failed = pair not in prices['MEXC']
            gate_failed = pair not in prices['Gate.io']
            
            if mexc_failed or gate_failed:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤
                if not hasattr(self.spread_tracker, 'active_spread_failures'):
                    self.spread_tracker.active_spread_failures = {}
                
                self.spread_tracker.active_spread_failures[pair] = self.spread_tracker.active_spread_failures.get(pair, 0) + 1
                
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ {pair}: MEXC={'‚úó' if mexc_failed else '‚úì'}, Gate={'‚úó' if gate_failed else '‚úì'} (–Ω–µ—É–¥–∞—á–∞ #{self.spread_tracker.active_spread_failures[pair]})")
                
                # –ï—Å–ª–∏ 3 –Ω–µ—É–¥–∞—á–∏ –ø–æ–¥—Ä—è–¥ - —É–¥–∞–ª—è–µ–º —Å–ø—Ä–µ–¥
                if self.spread_tracker.active_spread_failures[pair] >= 3:
                    print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø—Ä–µ–¥ {pair} –ø–æ—Å–ª–µ 3 –Ω–µ—É–¥–∞—á –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã")
                    pairs_to_remove.append(pair)
            else:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
                if hasattr(self.spread_tracker, 'active_spread_failures') and pair in self.spread_tracker.active_spread_failures:
                    del self.spread_tracker.active_spread_failures[pair]
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ø—Ä–µ–¥—ã
        for pair in pairs_to_remove:
            spread_info = self.spread_tracker.stop_tracking_spread(pair, 'price_unavailable')
            if spread_info and spread_info['message_id'] and self.telegram:
                self.telegram.delete_spread_message(spread_info['message_id'])
        
        print(f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: MEXC={len(prices['MEXC'])}, Gate.io={len(prices['Gate.io'])}, —É–¥–∞–ª–µ–Ω–æ={len(pairs_to_remove)}")
        
        return prices 
    
    def update_active_spreads(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø—Ä–µ–¥—ã –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã"""
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤
        prices = self.check_active_spreads_prices()
        
        if not prices['MEXC'] and not prices['Gate.io']:
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
        active_spreads_data = []
        mexc_pairs = set(prices['MEXC'].keys())
        gate_pairs = set(prices['Gate.io'].keys())
        common_pairs = mexc_pairs & gate_pairs
        
        for pair in common_pairs:
            mexc_price = prices['MEXC'][pair]
            gate_price = prices['Gate.io'][pair]
            spread_percent = ((mexc_price - gate_price) / gate_price) * 100
            
            active_spreads_data.append({
                'pair': pair,
                'mexc_price': mexc_price,
                'gate_price': gate_price,
                'spread_percent': spread_percent,
                'spread_abs': abs(spread_percent)
            })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤
        active_spreads = self.spread_tracker.get_active_spreads()
        threshold = 3.0
        
        for spread_data in active_spreads_data:
            pair = spread_data['pair']
            
            if pair in active_spreads:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
                self.spread_tracker.update_spread_time(pair, spread_data['spread_abs'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–±–∞–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                if self.spread_tracker.should_ban_ticker(pair):
                    print(f"üö´ –ê–∫—Ç–∏–≤–Ω—ã–π —Å–ø—Ä–µ–¥ {pair} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ 4 —á–∞—Å–æ–≤")
                    self.spread_tracker.add_banned_ticker(pair)
                    spread_info = self.spread_tracker.stop_tracking_spread(pair, 'timeout')
                    if spread_info and spread_info['message_id']:
                        self.telegram.delete_spread_message(spread_info['message_id'])
                    # –ù–û–í–û–ï: –£–¥–∞–ª—è–µ–º –∏–∑ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    self.daily_tracker.remove_pair_from_daily(pair)
                    self.update_daily_spreads_message()
                    continue
                
                # –î–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º 24-—á–∞—Å–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥
                is_new_ticker = active_spreads[pair].get('is_new_ticker', False)
                if is_new_ticker:
                    if self.spread_tracker.is_new_ticker_expired(pair):
                        # 24 —á–∞—Å–∞ –∏—Å—Ç–µ–∫–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–µ–¥
                        if spread_data['spread_abs'] < threshold:
                            print(f"üóëÔ∏è –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ä {pair} —É–¥–∞–ª–µ–Ω: –∏—Å—Ç—ë–∫ 24-—á–∞—Å–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥ –∏ —Å–ø—Ä–µ–¥ < {threshold}%")
                            spread_info = self.spread_tracker.stop_tracking_spread(pair, 'natural_end')
                            if spread_info and spread_info['message_id']:
                                self.telegram.delete_spread_message(spread_info['message_id'])
                            continue
                        else:
                            # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞, —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Å–ø—Ä–µ–¥
                            active_spreads[pair]['is_new_ticker'] = False
                            print(f"üîÑ –¢–∏–∫–µ—Ä {pair} –±–æ–ª—å—à–µ –Ω–µ –Ω–æ–≤—ã–π, —Å–ø—Ä–µ–¥ {spread_data['spread_abs']:.2f}% > {threshold}%")
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥
                    if spread_data['spread_abs'] < threshold:
                        print(f"üóëÔ∏è –û–±—ã—á–Ω—ã–π —Å–ø—Ä–µ–¥ {pair} —É–¥–∞–ª–µ–Ω: —É–ø–∞–ª –Ω–∏–∂–µ {threshold}%")
                        spread_info = self.spread_tracker.stop_tracking_spread(pair, 'natural_end')
                        if spread_info and spread_info['message_id']:
                            self.telegram.delete_spread_message(spread_info['message_id'])
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            if spread_info['duration'] >= 60:
                                self.daily_tracker.add_completed_spread(pair, spread_info['max_spread'], spread_info['duration'])
                                self.update_daily_spreads_message()
                        continue
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                if self.spread_tracker.should_update_message(pair):
                    message = self.format_spread_message(spread_data)
                    if is_new_ticker:
                        message = f"üÜï –ù–û–í–´–ô –¢–ò–ö–ï–†\n{message}"
                    
                    message_id = active_spreads[pair]['message_id']
                    success, should_ban = self.telegram.update_spread_message_with_buttons(message_id, message, pair)
                    
                    if should_ban:
                        print(f"üö´ –ê–∫—Ç–∏–≤–Ω—ã–π —Å–ø—Ä–µ–¥ {pair} –∑–∞–±–∞–Ω–µ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")
                        self.spread_tracker.add_banned_ticker(pair)
                        self.spread_tracker.stop_tracking_spread(pair, 'user_deleted')
                        # –ù–û–í–û–ï: –£–¥–∞–ª—è–µ–º –∏–∑ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        self.daily_tracker.remove_pair_from_daily(pair)
                        self.update_daily_spreads_message()
                    elif success:
                        duration = self.spread_tracker.get_spread_duration(pair)
                        duration_formatted = self.spread_tracker.format_duration(duration)
                        print(f"‚ö° –û–±–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø—Ä–µ–¥: {pair} ({spread_data['spread_abs']:.2f}%) - {duration_formatted}")    

    
    def calculate_spreads(self, prices: Dict[str, Dict[str, float]]) -> List[Dict]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ø—Ä–µ–¥—ã –º–µ–∂–¥—É MEXC –∏ Gate.io"""
        spreads = []
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ü–µ–Ω—ã –Ω–∞ –æ–±–µ–∏—Ö –±–∏—Ä–∂–∞—Ö
        mexc_pairs = set(prices['MEXC'].keys())
        gate_pairs = set(prices['Gate.io'].keys())
        common_pairs = mexc_pairs & gate_pairs
        
        for pair in common_pairs:
            mexc_price = prices['MEXC'][pair]
            gate_price = prices['Gate.io'][pair]
            
            # –°–ø—Ä–µ–¥ –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ (MEXC - Gate) / Gate * 100
            spread_percent = ((mexc_price - gate_price) / gate_price) * 100
            
            spreads.append({
                'pair': pair,
                'mexc_price': mexc_price,
                'gate_price': gate_price,
                'spread_percent': spread_percent,
                'spread_abs': abs(spread_percent)
            })
        
        return spreads
    
    def format_spread_message(self, spread: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ø—Ä–µ–¥–µ —Å –æ–±—ä—ë–º–æ–º –±–∏–¥–æ–≤ –∏ –ª–∏–º–∏—Ç–æ–º –ø–æ–∑–∏—Ü–∏–∏"""
        pair = spread['pair']
        spread_percent = spread['spread_percent']
        mexc_price = spread['mexc_price']
        gate_price = spread['gate_price']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if spread_percent > 0:
            mexc_direction = "SHORT"
            gate_direction = "LONG"
            reverse_icon = ""
        else:
            mexc_direction = "LONG" 
            gate_direction = "SHORT"
            reverse_icon = " üîÑ"
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        duration_seconds = self.spread_tracker.get_spread_duration(pair)
        duration_formatted = self.spread_tracker.format_duration(duration_seconds)
        max_spread = self.spread_tracker.get_max_spread(pair)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ priceScale
        mexc_price_formatted = self.format_price_by_scale(mexc_price, pair)
        gate_price_formatted = self.format_price_by_scale(gate_price, pair)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—ë–º 9 –±–∏–¥–æ–≤ MEXC
        mexc_volume = self.calculate_mexc_5_bids_volume(pair)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏
        position_limit = self.calculate_mexc_max_position_limit(pair)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"<b>–°–ü–†–ï–î {pair} {abs(spread_percent):.2f}%{reverse_icon}</b>\n\n"
        message += f"MEXC: {mexc_price_formatted} ({mexc_direction})\n"
        message += f"GATE: {gate_price_formatted} ({gate_direction})\n\n"
        message += f"–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è: {duration_formatted}\n"
        message += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {max_spread:.2f}%\n"
        if position_limit > 0:
            message += f"–õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏: {position_limit:,} USDT".replace(',', ' ')
        
        return message
    
    def manage_spread_messages(self, spreads: List[Dict], threshold: float):
        """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ —Å–ø—Ä–µ–¥–∞—Ö –≤ Telegram —Å 5-—Å–µ–∫—É–Ω–¥–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º"""
        if not self.telegram:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Å–ø—Ä–µ–¥—ã (–ø—Ä–æ—à–ª–æ 5 —Å–µ–∫—É–Ω–¥)
        confirmed_spreads = self.spread_tracker.check_pending_spreads()
        for confirmed in confirmed_spreads:
            pair = confirmed['pair']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø—Ä–µ–¥ –≤—Å—ë –µ—â—ë –∞–∫—Ç—É–∞–ª–µ–Ω
            current_spread_data = next((s for s in spreads if s['pair'] == pair and s['spread_abs'] >= threshold), None)
            
            if current_spread_data:
                # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
                message = self.format_spread_message(current_spread_data)
                if confirmed['is_new_ticker']:
                    message = f"üÜï –ù–û–í–´–ô –¢–ò–ö–ï–†\n{message}"
                
                message_id = self.telegram.send_spread_message_with_buttons(message, pair)
                if message_id:
                    self.spread_tracker.start_tracking_spread(
                        pair, 
                        message_id, 
                        current_spread_data['spread_abs'],
                        is_new_ticker=confirmed['is_new_ticker']
                    )
                    print(f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π —Å–ø—Ä–µ–¥: {pair} ({current_spread_data['spread_abs']:.2f}%)")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø—Ä–µ–¥—ã
        active_spreads = self.spread_tracker.get_active_spreads()
        pending_spreads = self.spread_tracker.pending_spreads
        current_pairs = {spread['pair']: spread for spread in spreads if spread['spread_abs'] >= threshold}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–ø—Ä–µ–¥—ã - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ
        for pair, spread_data in current_pairs.items():
            if self.spread_tracker.is_ticker_banned(pair):
                continue
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ, –Ω–æ –∏ –Ω–µ–¥–∞–≤–Ω–æ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–ø—Ä–µ–¥—ã
            if pair not in active_spreads and pair not in pending_spreads:
                # –ù–æ–≤—ã–π —Å–ø—Ä–µ–¥ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
                self.spread_tracker.add_pending_spread(pair, spread_data['spread_abs'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–ø–∞–ª–∏ –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ —Å–ø—Ä–µ–¥—ã
        for pair in list(pending_spreads.keys()):
            if pair not in current_pairs:
                self.spread_tracker.remove_pending_spread(pair)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø—Ä–µ–¥—ã
        for pair, spread_data in current_pairs.items():
            if pair in active_spreads:
                self.spread_tracker.update_spread_time(pair, spread_data['spread_abs'])
                
                if self.spread_tracker.should_ban_ticker(pair):
                    print(f"üö´ –¢–∏–∫–µ—Ä {pair} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ 4 —á–∞—Å–æ–≤")
                    self.spread_tracker.add_banned_ticker(pair)
                    spread_info = self.spread_tracker.stop_tracking_spread(pair, 'timeout')
                    if spread_info and spread_info['message_id']:
                        self.telegram.delete_spread_message(spread_info['message_id'])
                    # –ù–û–í–û–ï: –£–¥–∞–ª—è–µ–º –∏–∑ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    self.daily_tracker.remove_pair_from_daily(pair)
                    self.update_daily_spreads_message()
                    continue
                
                is_new_ticker = active_spreads[pair].get('is_new_ticker', False)
                if is_new_ticker:
                    if self.spread_tracker.is_new_ticker_expired(pair):
                        if spread_data['spread_abs'] < threshold:
                            print(f"üóëÔ∏è –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ä {pair} —É–¥–∞–ª–µ–Ω: –∏—Å—Ç—ë–∫ 24-—á–∞—Å–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥ –∏ —Å–ø—Ä–µ–¥ < {threshold}%")
                            spread_info = self.spread_tracker.stop_tracking_spread(pair, 'natural_end')
                            if spread_info and spread_info['message_id']:
                                self.telegram.delete_spread_message(spread_info['message_id'])
                            continue
                        else:
                            active_spreads[pair]['is_new_ticker'] = False
                            print(f"üîÑ –¢–∏–∫–µ—Ä {pair} –±–æ–ª—å—à–µ –Ω–µ –Ω–æ–≤—ã–π")
                else:
                    if spread_data['spread_abs'] < threshold:
                        print(f"üóëÔ∏è –°–ø—Ä–µ–¥ {pair} —É–¥–∞–ª–µ–Ω: —É–ø–∞–ª –Ω–∏–∂–µ {threshold}%")
                        spread_info = self.spread_tracker.stop_tracking_spread(pair, 'natural_end')
                        if spread_info and spread_info['message_id']:
                            self.telegram.delete_spread_message(spread_info['message_id'])
                            
                            if spread_info['duration'] >= 60:
                                # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏
                                position_limit = self.calculate_mexc_max_position_limit(pair)
                                self.daily_tracker.add_completed_spread(pair, spread_info['max_spread'], spread_info['duration'], position_limit)
                                self.update_daily_spreads_message()
                        continue
                
                if self.spread_tracker.should_update_message(pair):
                    message = self.format_spread_message(spread_data)
                    if is_new_ticker:
                        message = f"üÜï –ù–û–í–´–ô –¢–ò–ö–ï–†\n{message}"
                    
                    message_id = active_spreads[pair]['message_id']
                    success, should_ban = self.telegram.update_spread_message_with_buttons(message_id, message, pair)
                    
                    if should_ban:
                        print(f"üö´ –°–ø—Ä–µ–¥ {pair} –∑–∞–±–∞–Ω–µ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")
                        self.spread_tracker.add_banned_ticker(pair)
                        self.spread_tracker.stop_tracking_spread(pair, 'user_deleted')
                        # –ù–û–í–û–ï: –£–¥–∞–ª—è–µ–º –∏–∑ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        self.daily_tracker.remove_pair_from_daily(pair)
                        self.update_daily_spreads_message()
                        
    def remove_pair_from_daily(self, pair: str):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –∏–∑ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.daily_tracker.remove_pair_from_daily(pair)    
    
    def check_and_update_pairs_coverage(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
        if current_time - self.last_pairs_update >= self.pairs_update_interval:
            try:
                print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–∞—Ä—ã...")
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–∞—Ä —Å –±–∏—Ä–∂
                new_mexc_pairs = self.get_mexc_contracts()
                new_gate_pairs = self.get_gate_contracts()
                
                if new_mexc_pairs and new_gate_pairs:
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –æ–±—â–∏–µ –ø–∞—Ä—ã
                    new_common_pairs = new_mexc_pairs & new_gate_pairs
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –ø–∞—Ä—ã
                    if hasattr(self, 'verified_coverage_cache') and self.verified_coverage_cache:
                        existing_pairs = set(self.verified_coverage_cache.keys())
                        truly_new_pairs = new_common_pairs - existing_pairs
                        
                        if truly_new_pairs:
                            print(f"üÜï –ù–∞–π–¥–µ–Ω–æ {len(truly_new_pairs)} –Ω–æ–≤—ã—Ö –ø–∞—Ä: {', '.join(list(truly_new_pairs)[:5])}")
                            
                            # –ë—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–∞—Ä—ã
                            new_coverage = {pair: ['MEXC', 'Gate.io'] for pair in truly_new_pairs}
                            verified_new = self.verify_pairs_prices(new_coverage, True)
                            
                            if verified_new:
                                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–æ–≤—ã–µ –ø–∞—Ä—ã –≤ –∫—ç—à
                                self.verified_coverage_cache.update(verified_new)
                                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(verified_new)} –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                        else:
                            print("üìä –ù–æ–≤—ã—Ö –ø–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    self.last_pairs_update = current_time
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–∞—Ä")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä: {str(e)}")
    
    def update_daily_spreads_message(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è"""
        if not self.telegram:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –¥–Ω—è
        if self.daily_tracker.should_reset_daily_spreads():
            self.daily_tracker.reset_daily_spreads()

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
            message_text = self.daily_tracker.format_daily_spreads_message()
            message_id = self.telegram.create_pinned_message_with_retry(message_text, max_attempts=3)

            if message_id:
                self.daily_tracker.pinned_message_id = message_id
                self.daily_tracker.pin_created_today = True
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫—Ä–µ–ø {message_id} –¥–ª—è {self.daily_tracker.current_date_for_pin}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫—Ä–µ–ø")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if self.daily_tracker.pinned_message_id:
            message_text = self.daily_tracker.format_daily_spreads_message()
            success, _ = self.telegram.update_spread_message(
                self.daily_tracker.pinned_message_id,
                message_text
            )

            if not success:
                old_message_id = self.daily_tracker.pinned_message_id
                print(f"‚ö†Ô∏è –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {old_message_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                print("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π...")

                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç
                existing_pin = self.daily_tracker.try_find_existing_pin(self.telegram, max_attempts=3)

                if existing_pin:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç {existing_pin}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ")
                    self.daily_tracker.pinned_message_id = existing_pin
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
                    print("üìå –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π –ø–æ—Å—Ç...")
                    new_message_id = self.telegram.create_pinned_message_with_retry(message_text, max_attempts=3)

                    if new_message_id:
                        self.daily_tracker.pinned_message_id = new_message_id
                        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫—Ä–µ–ø {new_message_id}")
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫—Ä–µ–ø")
                        self.daily_tracker.pinned_message_id = None
    
    def print_spreads(self, spreads: List[Dict], threshold: float):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–µ–¥—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å —Ü–µ–Ω–∞–º–∏"""
        filtered_spreads = [s for s in spreads if s['spread_abs'] >= threshold 
                          and not self.spread_tracker.is_ticker_banned(s['pair'])]
        
        if not filtered_spreads:
            print(f"üìä –ù–µ—Ç —Å–ø—Ä–µ–¥–æ–≤ –≤—ã—à–µ {threshold}% (–∑–∞–±–∞–Ω–µ–Ω–æ: {len(self.spread_tracker.banned_tickers)})")
            return
        
        print(f"\nüéØ –°–ø—Ä–µ–¥—ã –≤—ã—à–µ {threshold}% (–Ω–∞–π–¥–µ–Ω–æ {len(filtered_spreads)}):")
        print("=" * 110)
        print(f"{'–ü–∞—Ä–∞':<15} {'MEXC':<12} {'Gate.io':<12} {'–°–ø—Ä–µ–¥':<10} {'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ':<35} {'–í—Ä–µ–º—è':<15}")
        print("-" * 110)
        
        for spread in filtered_spreads:
            pair = spread['pair']
            mexc_price = spread['mexc_price']
            gate_price = spread['gate_price']
            spread_percent = spread['spread_percent']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            if spread_percent > 0:
                direction = "SHORT MEXC ‚Üí LONG Gate.io"
                color = "üî¥"
            else:
                direction = "LONG MEXC ‚Üí SHORT Gate.io"
                color = "üü¢"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–ø—Ä–µ–¥–∞ –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
            duration = ""
            if pair in self.spread_tracker.get_active_spreads():
                duration_seconds = self.spread_tracker.get_spread_duration(pair)
                duration = self.spread_tracker.format_duration(duration_seconds)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ priceScale
            mexc_formatted = self.format_price_by_scale(mexc_price, pair)
            gate_formatted = self.format_price_by_scale(gate_price, pair)
            
            print(f"{pair}_USDT{'':<5} {mexc_formatted:<12} {gate_formatted:<12} {spread_percent:>+7.2f}% {color} {direction:<33} {duration}")
    
    def monitor_spreads(self, threshold: float, update_interval: int = 3):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –±—ã—Å—Ç—Ä—ã–µ –∏ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø—Ä–µ–¥–æ–≤ –¥–ª—è 2 –±–∏—Ä–∂ (–ø–æ—Ä–æ–≥: {threshold}%, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {update_interval}—Å)")
        print(f"‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø—Ä–µ–¥—ã: –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã")
        print(f"üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–ø—Ä–µ–¥–æ–≤: –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥")
        print(f"üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥")
        print(f"‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
        print(f"üìå –ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞–∫—Ä–µ–ø–æ–≤: –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä
        force_refresh = False
        file_age = self.get_file_age_hours()
        self.initialize_daily_spreads_message()
        
        if file_age is not None and file_age < 12:
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä (–≤–æ–∑—Ä–∞—Å—Ç: {file_age:.1f}—á)")
        else:
            print("üìÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä...")
            force_refresh = True
        
        verified_coverage = self.find_pairs_coverage(force_refresh)
        if not verified_coverage:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return
        
        self.verified_coverage_cache = verified_coverage
        print(f"\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {len(verified_coverage)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ä")
        
        # –°–æ–∑–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.update_daily_spreads_message()
        
        try:
            cycle_count = 0
            last_full_scan = 0
            last_duplicate_check = 0
            last_stale_check = 0
            last_pins_check = 0
            full_scan_interval = 15       # –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
            duplicate_check_interval = 30 # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            stale_check_interval = 300    # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–±—ã–ª–æ 60 —Å–µ–∫—É–Ω–¥)
            pins_check_interval = 900     # –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            
            while True:
                cycle_count += 1
                current_time = time.time()
                
                print(f"\n{'='*60}")
                print(f"üîÑ –¶–∏–∫–ª #{cycle_count} - {datetime.now().strftime('%H:%M:%S')}")
                
                # –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                if self.spread_tracker.get_active_spreads():
                    print("‚ö° –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤...")
                    self.update_active_spreads()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–ø—Ä–µ–¥–æ–≤
                if current_time - last_duplicate_check >= duplicate_check_interval:
                    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–ø—Ä–µ–¥–æ–≤...")
                    self.check_duplicate_spreads()
                    last_duplicate_check = current_time
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if current_time - last_stale_check >= stale_check_interval:
                    print("‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
                    self.check_stale_messages(max_idle_time=120)  # 120 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è = –∑–∞–≤–∏—Å–ª–æ
                    last_stale_check = current_time
                
                # –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
                if current_time - last_full_scan >= full_scan_interval:
                    print("üîç –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
                    prices = self.get_current_prices(verified_coverage)
                    all_spreads = self.calculate_spreads(prices)
                    
                    # –ò—â–µ–º –Ω–æ–≤—ã–µ —Å–ø—Ä–µ–¥—ã –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
                    self.manage_spread_messages(all_spreads, threshold)
                    self.print_spreads(all_spreads, threshold)
                    
                    last_full_scan = current_time
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 20 –ø–æ–ª–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
                    if cycle_count % (20 * (full_scan_interval // update_interval)) == 0:
                        self.update_daily_spreads_message()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫—Ä–µ–ø–æ–≤
                if current_time - last_pins_check >= pins_check_interval:
                    print("üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
                    self.manage_pinned_messages(max_pins=30)
                    last_pins_check = current_time
                
                time.sleep(update_interval)
                    
        except KeyboardInterrupt:
            print("\n\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            if self.telegram:
                moscow_tz = timezone(timedelta(hours=3))
                current_time = datetime.now(moscow_tz)
                stop_message = f"üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n‚è∞ {current_time.strftime('%H:%M:%S')}"
                self.telegram.send_message(stop_message)
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")
    
class TelegramBot:
    def __init__(self, token: str):
        if not TELEGRAM_AVAILABLE:
            raise ImportError("python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        self.token = token
        self.bot = Bot(token=token)
        self.monitor = None
        self.monitor_thread = None
        self.is_running = False
        self.monitoring_enabled = False
        
    def start_monitoring(self, chat_id: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_running:
            return "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!"
        
        try:
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –¥–ª—è Telegram
            telegram_notifier = TelegramNotifier(self.token, chat_id)
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
            self.monitor = TwoExchangeMonitor(telegram_notifier)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.monitor_thread = threading.Thread(
                target=self._run_monitor, 
                daemon=True
            )
            self.monitor_thread.start()
            self.is_running = True
            
            return "‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /on –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–ø—Ä–µ–¥–æ–≤."
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"
    
    def enable_monitoring(self):
        """–í–∫–ª—é—á–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ø—Ä–µ–¥–æ–≤"""
        if not self.is_running or not self.monitor:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        
        self.monitoring_enabled = True
        return "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤ –í–ö–õ–Æ–ß–ï–ù. –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª."
    
    def disable_monitoring(self):
        """–í—ã–∫–ª—é—á–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ø—Ä–µ–¥–æ–≤"""
        if not self.is_running or not self.monitor:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
        
        self.monitoring_enabled = False
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–ø—Ä–µ–¥–∞—Ö
        if self.monitor:
            active_spreads = self.monitor.spread_tracker.get_active_spreads()
            for pair in list(active_spreads.keys()):
                spread_info = self.monitor.spread_tracker.stop_tracking_spread(pair, 'manual_stop')
                if spread_info and spread_info['message_id'] and self.monitor.telegram:
                    self.monitor.telegram.delete_spread_message(spread_info['message_id'])
        
        return "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤ –í–´–ö–õ–Æ–ß–ï–ù. –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã."
    
    def _run_monitor(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            threshold = 3.0
            interval = 3
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            verified_coverage = self.monitor.find_pairs_coverage(False)
            if not verified_coverage:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                return
            
            print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {len(verified_coverage)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ä")
            
            cycle_count = 0
            while True:
                cycle_count += 1
                
                moscow_tz = timezone(timedelta(hours=3))
                current_time = datetime.now(moscow_tz)
                
                print(f"\n{'='*60}")
                print(f"üîÑ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ #{cycle_count} - {current_time.strftime('%H:%M:%S')}")
                print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'–ê–ö–¢–ò–í–ï–ù' if self.monitoring_enabled else '–ü–ê–£–ó–ê'}")
                print(f"{'='*60}")
                
                if self.monitoring_enabled:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
                    prices = self.monitor.get_current_prices(verified_coverage)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥—ã
                    all_spreads = self.monitor.calculate_spreads(prices)
                    print(f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ —Å–ø—Ä–µ–¥–æ–≤: {len(all_spreads)}")
                    
                    # –£–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ Telegram
                    self.monitor.manage_spread_messages(all_spreads, threshold)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 20 —Ü–∏–∫–ª–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É)
                    if cycle_count % 20 == 0:
                        self.monitor.update_daily_spreads_message()
                    
                    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
                    self.monitor.print_spreads(all_spreads, threshold)
                else:
                    print("‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /on –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                
                # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                time.sleep(interval)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")
            import traceback
            traceback.print_exc()
        finally:
            self.is_running = False
    
    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.is_running and self.monitor:
            active_count = len(self.monitor.spread_tracker.get_active_spreads())
            banned_count = len(self.monitor.spread_tracker.banned_tickers)
            daily_count = len(self.monitor.daily_tracker.daily_spreads)  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            status_text = "–ê–ö–¢–ò–í–ï–ù" if self.monitoring_enabled else "–ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù"
            
            return f"‚úÖ –°–∏—Å—Ç–µ–º–∞: –ó–∞–ø—É—â–µ–Ω–∞\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {status_text}\nüéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤: {active_count}\nüö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_count}\nüìã –î–Ω–µ–≤–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤: {daily_count}"
        else:
            return "üõë –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
    
    def get_banned_list(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤"""
        if not self.monitor:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
        
        banned_tickers = self.monitor.spread_tracker.banned_tickers
        if not banned_tickers:
            return "‚úÖ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
        
        return f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(banned_tickers)}\n" + "\n".join(sorted(banned_tickers))
    
    def ban_tickers(self, tickers: List[str]):
        """–ë–∞–Ω–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã"""
        if not self.monitor:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
        
        banned_count = 0
        for ticker in tickers:
            ticker = ticker.upper()
            if not self.monitor.spread_tracker.is_ticker_banned(ticker):
                self.monitor.spread_tracker.add_banned_ticker(ticker)
                banned_count += 1
                
                # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø—Ä–µ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
                if ticker in self.monitor.spread_tracker.get_active_spreads():
                    spread_info = self.monitor.spread_tracker.stop_tracking_spread(ticker, 'manual_ban')
                    if spread_info and spread_info['message_id']:
                        self.monitor.telegram.delete_spread_message(spread_info['message_id'])
        
        return f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {banned_count} –∏–∑ {len(tickers)}"
    
    def unban_tickers(self, tickers: List[str]):
        """–†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã"""
        if not self.monitor:
            return "‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
        
        unbanned_count = 0
        result_messages = []
        
        for ticker in tickers:
            ticker = ticker.upper().strip()
            if self.monitor.spread_tracker.remove_banned_ticker(ticker):
                unbanned_count += 1
                result_messages.append(f"‚úÖ –¢–∏–∫–µ—Ä {ticker} —Ä–∞–∑–±–∞–Ω–µ–Ω")
            else:
                result_messages.append(f"‚ÑπÔ∏è –¢–∏–∫–µ—Ä {ticker} –Ω–µ –±—ã–ª –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        
        summary = f"üìä –†–∞–∑–±–∞–Ω–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {unbanned_count} –∏–∑ {len(tickers)}"
        return summary + "\n" + "\n".join(result_messages)
    
def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        from telegram.ext import Application, CommandHandler
    except ImportError:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")
        return
    
    BOT_TOKEN = "8213114507:AAFr0ut26G_o-iCtHkny7FQFh242sK7pO0I"
    CHANNEL_ID = "-1002913842685"
    
    try:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        telegram_bot = TelegramBot(BOT_TOKEN)
        print("‚úÖ Telegram –±–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        async def start_command(update, context):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
            result = telegram_bot.start_monitoring(CHANNEL_ID)
            await update.message.reply_text(result)
        
        async def on_command(update, context):
            """–í–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø—Ä–µ–¥–æ–≤"""
            result = telegram_bot.enable_monitoring()
            await update.message.reply_text(result)
        
        async def off_command(update, context):
            """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø—Ä–µ–¥–æ–≤"""
            result = telegram_bot.disable_monitoring()
            await update.message.reply_text(result)
        
        async def status_command(update, context):
            """–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
            status = telegram_bot.get_status()
            await update.message.reply_text(status)
        
        async def list_command(update, context):
            """–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤"""
            banned_list = telegram_bot.get_banned_list()
            await update.message.reply_text(banned_list)
        
        async def ban_command(update, context):
            """–ë–∞–Ω —Ç–∏–∫–µ—Ä–æ–≤"""
            if not context.args:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è –±–∞–Ω–∞\n–ü—Ä–∏–º–µ—Ä: /ban BTC ETH ADA")
                return
            
            result = telegram_bot.ban_tickers(context.args)
            await update.message.reply_text(result)
        
        async def unban_command(update, context):
            """–†–∞–∑–±–∞–Ω —Ç–∏–∫–µ—Ä–æ–≤"""
            if not context.args:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞\n–ü—Ä–∏–º–µ—Ä: /unban BTC ETH ADA")
                return
            
            result = telegram_bot.unban_tickers(context.args)
            await update.message.reply_text(result)
        
        # –°–æ–∑–¥–∞–µ–º Application
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("on", on_command))
        application.add_handler(CommandHandler("off", off_command))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(CommandHandler("list", list_command))
        application.add_handler(CommandHandler("ban", ban_command))
        application.add_handler(CommandHandler("unban", unban_command))
        
        print("=" * 60)
        print("ü§ñ TELEGRAM –ë–û–¢ v3.2 –ó–ê–ü–£–©–ï–ù!")
        print("=" * 60)
        print("üì± –ö–æ–º–∞–Ω–¥—ã:")
        print("   /start - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
        print("   /on - –í–ö–õ–Æ–ß–ò–¢–¨ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤")
        print("   /off - –í–´–ö–õ–Æ–ß–ò–¢–¨ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–æ–≤")
        print("   /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        print("   /list - —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
        print("   /ban BTC ETH - –∑–∞–±–∞–Ω–∏—Ç—å —Ç–∏–∫–µ—Ä—ã")
        print("   /unban BTC ETH - —Ä–∞–∑–±–∞–Ω–∏—Ç—å —Ç–∏–∫–µ—Ä—ã")
        print("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(allowed_updates=['message'])
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
def main():
    print("=" * 80)
    print("üéØ MEXC vs Gate.io —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ v3.2")  
    print("=" * 80)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–∞–ª –≤–º–µ—Å—Ç–æ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
    BOT_TOKEN = "8012334983:AAEbzjXBx3XXS_nJZPptCz9dzXRuPQsz6a4"
    CHANNEL_ID = "-1003153711998"  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–µ–¥–æ–≤
    
    telegram_notifier = None
    
    if BOT_TOKEN != "YOUR_BOT_TOKEN_HERE" and CHANNEL_ID != "YOUR_CHAT_ID_HERE":
        try:
            telegram_notifier = TelegramNotifier(BOT_TOKEN, CHANNEL_ID)
            print("ü§ñ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
            print(f"üì¢ –ö–∞–Ω–∞–ª –¥–ª—è —Å–ø—Ä–µ–¥–æ–≤: {CHANNEL_ID}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram: {e}")
            telegram_notifier = None
    else:
        print("üíª –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ Telegram")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä —Å —É–≤–µ–¥–æ–º–∏—Ç–µ–ª–µ–º
    monitor = TwoExchangeMonitor(telegram_notifier)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    threshold = 3.0
    interval = 3
    
    print(f"\nüöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ v3.2:")
    print(f"   ‚Ä¢ –ü–æ—Ä–æ–≥–æ–≤—ã–π —Å–ø—Ä–µ–¥: {threshold}%")
    print(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å")
    print(f"   ‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ‚úÖ")
    print(f"   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: ‚úÖ")
    print(f"   ‚Ä¢ –ê–≤—Ç–æ–±–∞–Ω –ø–æ—Å–ª–µ 4—á: ‚úÖ")
    print(f"   ‚Ä¢ –û–±—ä—ë–º 9 –±–∏–¥–æ–≤ MEXC: ‚úÖ")
    print(f"   ‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ‚úÖ")
    print(f"   ‚Ä¢ –°—Ç—Ä–æ–≥–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ priceScale: ‚úÖ")
    print(f"   ‚Ä¢ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: ‚úÖ")
    print(f"   ‚Ä¢ –ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {CHANNEL_ID}")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor.monitor_spreads(threshold, interval)

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--bot":
        run_telegram_bot()
    else:
        main()
